{"version":3,"sources":["screens/NotFoundScreen.tsx","aws-exports.js","styles/styles.ts","error/actionCreators.ts","error/actionTypes.js","redux/utilities/dispatchResText.ts","redux/utilities/verifyRes.ts","error/errors.ts","redux/ActionCreators.ts","redux/ActionTypes.ts","screens/SignInScreen.tsx","screens/SignUpScreen.tsx","navigation/AuthNavigator.tsx","constants/Colors.ts","components/Themed.tsx","screens/TabOneScreen.tsx","screens/TabTwoScreen.tsx","navigation/BottomTabNavigator.tsx","navigation/Root.tsx","navigation/LinkingConfiguration.ts","navigation/index.tsx","error/reducer.ts","redux/RootReducer.ts","redux/ConfigureStore.ts","App.tsx","hooks/useCachedResources.ts","hooks/useColorScheme.web.ts","assets/fonts/SpaceMono-Regular.ttf"],"names":["NotFoundScreen","navigation","View","style","styles","container","Text","title","TouchableOpacity","onPress","replace","link","linkText","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","padding","fontSize","fontWeight","marginTop","paddingVertical","color","awsmobile","input","height","marginBottom","width","button","separator","marginVertical","logError","e","dispatch","console","error","type","payload","actionType","res","a","async","text","ok","Error","status","statusText","NetworkError","fetchTest","fetch","then","verifyRes","dispatchResText","catch","signInSuccessful","Amplify","configure","config","actionCreators","connect","PropTypes","func","isRequired","state","useState","email","useRef","password","TextInput","placeholder","onChangeText","value","current","secureTextEntry","Button","Auth","signIn","user","err","log","navigate","authCode","setAuthCode","signUp","username","confirmSignUp","Stack","createStackNavigator","AuthNavigator","Navigator","initialRouteName","Screen","name","component","SignInScreen","options","SignUpScreen","light","background","tint","tabIconDefault","tabIconSelected","dark","useThemeColor","props","colorName","colorFromProps","Colors","lightColor","darkColor","otherProps","propTypes","setTest","test","string","TabOneScreen","newValue","useEffect","val","setNewValue","body","method","TabTwoScreen","Linking","BottomTab","createBottomTabNavigator","BottomTabNavigator","tabBarOptions","activeTintColor","TabOneNavigator","tabBarIcon","TabBarIcon","TabTwoNavigator","Ionicons","size","TabOneStack","headerTitle","TabTwoStack","bool","auth","authenticated","prefixes","screens","Root","TabOne","TabTwo","NotFound","Navigation","colorScheme","NavigationContainer","linking","LinkingConfiguration","theme","DarkTheme","DefaultTheme","RootNavigator","screenOptions","headerShown","INITIAL_STATE","errors","errorReducer","action","concat","AUTH_STATE","rootReducer","combineReducers","appStore","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunk","App","React","isLoadingComplete","setLoadingComplete","SplashScreen","Font","font","require","warn","useCachedResources","store","StatusBar","module","exports"],"mappings":"y3BAMe,SAASA,EAAT,GAEuC,IADpDC,EACmD,EADnDA,WAEA,OACE,gBAACC,EAAA,EAAD,CAAMC,MAAOC,EAAOC,WAClB,gBAACC,EAAA,EAAD,CAAMH,MAAOC,EAAOG,OAApB,8BACA,gBAACC,EAAA,EAAD,CAAkBC,QAAS,kBAAMR,EAAWS,QAAQ,SAASP,MAAOC,EAAOO,MACzE,gBAACL,EAAA,EAAD,CAAMH,MAAOC,EAAOQ,UAApB,wBAMR,IAAMR,EAASS,IAAWC,OAAO,CAC/BT,UAAW,CACTU,KAAM,EACNC,gBAAiB,OACjBC,WAAY,SACZC,eAAgB,SAChBC,QAAS,IAEXZ,MAAO,CACLa,SAAU,GACVC,WAAY,QAEdV,KAAM,CACJW,UAAW,GACXC,gBAAiB,IAEnBX,SAAU,CACRQ,SAAU,GACVI,MAAO,a,mDCxBIC,EAVG,CACd,mBAAsB,YACtB,6BAAgC,iDAChC,mBAAsB,YACtB,kBAAqB,sBACrB,6BAAgC,6BAChC,MAAS,ICPEZ,MAAWC,OAAO,CAC7BY,MAAO,CACHC,OAAQ,GACRX,gBAAiB,UACjBY,aAAc,GACdC,MAAO,OAEXxB,UAAW,CACPU,KAAM,EACNG,eAAgB,SAChBD,WAAY,SACZD,gBAAiB,WAErBc,OAAQ,CACJF,aAAc,IAElBrB,MAAO,CACHa,SAAU,GACVC,WAAY,QAEhBU,UAAW,CACPC,eAAgB,GAChBL,OAAQ,EACRE,MAAO,SCtBFI,EAAW,SAACC,GAAD,OAAc,SAACC,GACnCC,QAAQC,MAAMH,GACdC,EAAS,CAAEG,KCLM,QDKOC,QAASL,MEFtB,WAACC,EAAuBK,GAAxB,OAA+C,SAC1DC,GAD0D,eAAAC,EAAAC,OAAA,kEAAAD,EAAA,MAG/BD,EAAIG,QAH2B,OAGpDA,EAHoD,OAK1DT,EADe,CAAEG,KAAME,EAAYD,QAASK,IAJc,8DCA/C,WAACH,GACZ,GAAIA,EAAII,GACJ,OAAOJ,EAEP,MCLoB,SAACA,GACX,IAAIK,MAAM,SAAWL,EAAIM,OAAS,KAAON,EAAIO,YDIjDC,CAAaR,IEAdS,EAAY,SAAOf,GAAP,SAAAO,EAAAC,OAAA,gDACrBQ,MAAM,uCACDC,KAAKC,GACLD,KAAKE,EAAgBnB,ECTN,aDUfoB,OAAM,SAACrB,GAAD,OAAOC,EAASF,EAASC,OAJf,6DAoCZsB,EAAmB,iBAAO,CAAClB,KCzCT,kBDyCgCC,QAAS,OEpCxEkB,UAAQC,UAAUC,GAOlB,IAIMC,EAAiB,CAAEJ,oBAgDVK,GA7COC,IAAUC,KAAKC,WA6CtBH,aApDS,SAACI,GACrB,MAAO,KAmD6BL,EAAzBC,EAxCuB,SAAC,GAAsC,IAApC5D,EAAmC,EAAnCA,WAAYuD,EAAuB,EAAvBA,iBAAuB,EACxCU,mBAAS,IAD+B,WAElEC,GAFkE,UAE1DC,iBAAO,KACfC,EAAWD,iBAAO,IAaxB,OACI,kBAAClE,EAAA,EAAD,CAAMC,MAAOC,EAAOC,WAChB,kBAACiE,EAAA,EAAD,CACIC,YAAY,QACZC,aAAc,SAACC,GAAD,OAAYN,EAAMO,QAAUD,GAC1CtE,MAAOC,EAAOsB,QAElB,kBAAC4C,EAAA,EAAD,CACIC,YAAY,WACZI,iBAAiB,EACjBH,aAAc,SAACC,GAAD,OAAYJ,EAASK,QAAUD,GAC7CtE,MAAOC,EAAOsB,QAElB,kBAACxB,EAAA,EAAD,CAAMC,MAAOC,EAAO0B,QACpB,kBAAC8C,EAAA,EAAD,CAAQrE,MAAM,UAAUE,QAzBjB,WACXoE,IAAKC,OAAOX,EAAMO,QAASL,EAASK,SAC/BtB,MAAK,SAAC2B,GACHvB,OAGHD,OAAM,SAACyB,GACJ5C,QAAQ6C,IAAI,qBAAsBD,UAoBtC,kBAACJ,EAAA,EAAD,CACIrE,MAAM,uCACNE,QAAS,kBAAMR,EAAWiF,SAAS,mBCrDnDzB,UAAQC,UAAUC,GAOlB,IAIMC,EAAiB,CAAEJ,oBA0DVK,GAvDOC,IAAUC,KAAKC,WAuDtBH,aA9DS,SAACI,GACrB,MAAO,KA6D6BL,EAAzBC,EAlDuB,SAAC,GAAyB,EAAvBL,iBAAwB,IAAD,EAC5BU,mBAAS,IADmB,WACrDiB,EADqD,KAC3CC,EAD2C,KAEtDjB,EAAQC,iBAAO,IACJA,iBAAO,IA2BxB,OACI,kBAAClE,EAAA,EAAD,CAAMC,MAAOC,EAAOC,WAChB,kBAACiE,EAAA,EAAD,CACIC,YAAY,QACZC,aAAc,SAACC,GAAD,OAAYN,EAAMO,QAAUD,GAC1CtE,MAAOC,EAAOsB,QAElB,kBAAC4C,EAAA,EAAD,CACIC,YAAY,aACZC,aAAc,SAACC,GAAD,OAlCL,SAACU,GAClBC,EAAYD,GAiCqBX,CAAaC,IACtCtE,MAAOC,EAAOsB,QAElB,kBAACxB,EAAA,EAAD,CAAMC,MAAOC,EAAO0B,QAChB,kBAAC8C,EAAA,EAAD,CAAQrE,MAAM,UAAUE,QAnCrB,WACXoE,IAAKQ,OAAO,CACRC,SAAU,wBACVjB,SAAU,iBAETjB,MAAK,SAACX,GACHL,QAAQ6C,IAAI,sBAAuBxC,MAEtCc,OAAM,SAACyB,GACJ5C,QAAQ6C,IAAI,qBAAsBD,UA4BtC,kBAACJ,EAAA,EAAD,CAAQrE,MAAM,eAAeE,QAzBjB,WAChBoE,IAAKU,cAAc,wBAAyBJ,GACvC/B,MAAK,SAACX,GACHL,QAAQ6C,IAAI,4BAA6BxC,MAE5Cc,OAAM,SAACyB,GACJ5C,QAAQ6C,IAAI,0BAA2BD,cC9CjDQ,EAAQC,cASCC,EAPO,kBACd,kBAACF,EAAMG,UAAP,CAAiBC,iBAAiB,WAC9B,kBAACJ,EAAMK,OAAP,CAAcC,KAAK,UAAUC,UAAWC,EAAcC,QAAS,CAAE1F,MAAO,aACxE,kBAACiF,EAAMK,OAAP,CAAcC,KAAK,UAAUC,UAAWG,EAAcD,QAAS,CAAE1F,MAAO,e,0BCRrE,GACb4F,MAAO,CACLvD,KAAM,OACNwD,WAAY,OACZC,KAPmB,UAQnBC,eAAgB,OAChBC,gBATmB,WAWrBC,KAAM,CACJ5D,KAAM,OACNwD,WAAY,OACZC,KAbkB,OAclBC,eAAgB,OAChBC,gBAfkB,S,iBCKf,SAASE,GACdC,EACAC,GAEA,IACMC,EAAiBF,EAAK,MAE5B,OAAIE,GAGKC,EAAM,MAAQF,GAYlB,SAASrG,GAAKoG,GAAmB,IAC9BvG,EAAgDuG,EAAhDvG,MAAO2G,EAAyCJ,EAAzCI,WAAYC,EAA6BL,EAA7BK,UAAcC,EADJ,IACmBN,EADnB,oCAE/BlF,EAAQiF,GAAc,CAAEN,MAAOW,EAAYN,KAAMO,GAAa,QAEpE,OAAO,gBAAC,IAAD,KAAa5G,MAAO,CAAC,CAAEqB,SAASrB,IAAY6G,IAG9C,SAAS9G,GAAKwG,GAAmB,IAC9BvG,EAAgDuG,EAAhDvG,MAAO2G,EAAyCJ,EAAzCI,WAAYC,EAA6BL,EAA7BK,UAAcC,EADJ,IACmBN,EADnB,oCAE/B1F,EAAkByF,GAAc,CAAEN,MAAOW,EAAYN,KAAMO,GAAa,cAE9E,OAAO,gBAAC,IAAD,KAAa5G,MAAO,CAAC,CAAEa,mBAAmBb,IAAY6G,ICxB/D,IAWMC,GAAY,CACd/D,UAAWY,IAAUC,KAAKC,WAC1BkD,QAASpD,IAAUC,KAAKC,WACxBmD,KAAMrD,IAAUsD,OAAOpD,YAKrBqD,GAAgC,SAACX,GACnC,IAAMY,EAAgBlD,mBAOtB,OALAmD,qBAAU,WACNb,EAAMxD,YACNoE,EAAS5C,QAAU,KACpB,IAGC,kBAAC,GAAD,CAAMvE,MAAOC,EAAOC,WAChB,kBAAC,GAAD,CAAMF,MAAOC,EAAOG,OAApB,IAA6B,iBAAmBmG,EAAMS,KAAtD,KACA,kBAAC,GAAD,CACIhH,MAAOC,EAAO2B,UACd+E,WAAW,OACXC,UAAU,0BAEd,kBAACzC,EAAA,EAAD,CACIC,YAAY,yBAEZC,aAAc,SAACgD,IAjBP,SAACA,GAAiBF,EAAS5C,QAAU8C,EAkBzCC,CAAYD,IAEhBrH,MAAOC,EAAOsB,QAElB,kBAACkD,EAAA,EAAD,CACInE,QAAS,kBAAMiG,EAAMQ,QAAQI,EAAS5C,UACtCnE,MAAM,mBAMtB8G,GAAaJ,UAAYA,GAEVpD,oBArDS,SAACI,GAErB,OADaA,EAAMkD,QAII,SAAChF,GAAD,MAA4B,CAEnDe,UAAW,WAAWf,EAASe,IAC/BgE,QAAS,SAACM,GAAqBrF,EPTZ,SAACqF,GAAD,OAAiB,SAAOrF,GAAP,SAAAO,EAAAC,OAAA,gDAMpCQ,MAAM,sCALU,CACZuE,KAAMF,EACNG,OAAQ,SAIPvE,KAAKC,GACLD,MAAK,kBAAMjB,EAAS,CAAEG,KCrBP,WDqBuBC,QAASiF,OAC/CjE,OAAM,SAACrB,GAAD,OAAOC,EAASF,EAASC,OATA,6DOSIgF,CAAQM,QA6CrC3D,CAA6CwD,I,UC3D7C,SAASO,KACtB,OACE,gBAAC,GAAD,CAAMzH,MAAOC,EAAOC,WAClB,gBAAC,GAAD,CAAMF,MAAOC,EAAOG,OAApB,WACA,gBAAC,GAAD,CAAMJ,MAAOC,EAAO2B,UAAW+E,WAAW,OAAOC,UAAU,0BACrD,gBAACnC,EAAA,EAAD,CACInE,QAAS,kBAAMoH,WAAgB,0FAC/BtH,MAAM,kBCLtB,IAAMuH,GAAYC,cAEH,SAASC,KAGtB,OACE,gBAACF,GAAUnC,UAAX,CACEC,iBAAiB,SACjBqC,cAAe,CAAEC,gBAAiBrB,EAAM,MAAcR,OACtD,gBAACyB,GAAUjC,OAAX,CACEC,KAAK,SACLC,UAAWoC,GACXlC,QAAS,CACPmC,WAAY,gBAAG5G,EAAH,EAAGA,MAAH,OAAe,gBAAC6G,GAAD,CAAYvC,KAAK,WAAWtE,MAAOA,QAGlE,gBAACsG,GAAUjC,OAAX,CACEC,KAAK,SACLC,UAAWuC,GACXrC,QAAS,CACPmC,WAAY,gBAAG5G,EAAH,EAAGA,MAAH,OAAe,gBAAC6G,GAAD,CAAYvC,KAAK,WAAWtE,MAAOA,SASxE,SAAS6G,GAAW3B,GAClB,OAAO,gBAAC6B,EAAA,EAAD,KAAUC,KAAM,GAAIrI,MAAO,CAAEyB,cAAe,IAAS8E,IAK9D,IAAM+B,GAAchD,cAEpB,SAAS0C,KACP,OACE,gBAACM,GAAY9C,UAAb,KACE,gBAAC8C,GAAY5C,OAAb,CACEC,KAAK,eACLC,UAAWsB,GACXpB,QAAS,CAAEyC,YAAa,oBAMhC,IAAMC,GAAclD,cAEpB,SAAS6C,KACP,OACE,gBAACK,GAAYhD,UAAb,KACE,gBAACgD,GAAY9C,OAAb,CACEC,KAAK,eACLC,UAAW6B,GACX3B,QAAS,CAAEyC,YAAa,oBCrDtB5E,IAAU8E,KAAK5E,WANzB,IAiBeH,gBAjBS,SAACI,GAErB,MAAO,CAAC4E,KADK5E,EAAM4E,KAAKC,iBAgBbjF,EALe,SAAC,GAC3B,OADsC,EAAVgF,KACX,kBAACb,GAAD,MACV,kBAAC,EAAD,SCrBI,IACXe,SAAU,CAAClB,WAAgB,MAC3BlE,OAAQ,CACJqF,QAAS,CACLC,KAAM,CACFD,QAAS,CACLE,OAAQ,CACJF,QAAS,CACL3B,aAAc,QAGtB8B,OAAQ,CACJH,QAAS,CACLpB,aAAc,QAGtBlC,cAAe,CACXsD,QAAS,CACLhD,aAAc,UACdE,aAAc,aAI1BkD,SAAU,QCbX,SAASC,GAAT,GAAwE,IAAlDC,EAAiD,EAAjDA,YACnC,OACE,gBAACC,EAAA,EAAD,CACEC,QAASC,GACTC,MAAuB,SAAhBJ,EAAyBK,IAAYC,KAC5C,gBAACC,GAAD,OAON,IAAMrE,GAAQC,cAEd,SAASoE,KACP,OACE,gBAAC,GAAMlE,UAAP,CAAiBmE,cAAe,CAAEC,aAAa,IAC7C,gBAAC,GAAMlE,OAAP,CAAcC,KAAK,OAAOC,UAAWkD,KACrC,gBAAC,GAAMpD,OAAP,CAAcC,KAAK,WAAWC,UAAW/F,EAAgBiG,QAAS,CAAE1F,MAAO,Y,4lBC3BjF,IAAMyJ,GAAgB,CAClBC,OAAQ,IAYGC,GATM,WAA4C,IAA3CjG,EAA0C,uDAAlC+F,GAAeG,EAAmB,uCAC5D,OAAQA,EAAO7H,MACX,IjBTa,QiBUT,OAAO,SAAK2B,GAAZ,IAAmBgG,OAAQhG,EAAMgG,OAAOG,OAAOD,EAAO5H,WAC1D,QACI,OAAO0B,I,qkBCPnB,IAAM+F,GAAgB,CAClB7C,KAAM,aAGJkD,GAAa,CACfvB,eAAe,GAwBNwB,GAAcC,aAAgB,CACvCpD,KAtBgB,WAA4C,IAA3ClD,EAA0C,uDAAlC+F,GAAeG,EAAmB,uCAC3D,OAAQA,EAAO7H,MACX,IAAK,WACD,OAAO,SAAK2B,GAAZ,IAAmBkD,KAAMgD,EAAO5H,UACpC,QACI,OAAO0B,IAkBf4E,KAdgB,WAAyC,IAAxC5E,EAAuC,uDAA/BoG,GAAYF,EAAmB,uCACxD,OAAQA,EAAO7H,MACX,IAAK,kBAED,OADAF,QAAQ6C,IAAI,QAAShB,GACd,SAAKA,GAAZ,IAAmB6E,eAAe,IACtC,IAAK,eACD,OAAO,SAAK7E,GAAZ,IAAmB6E,eAAe,IACtC,QACI,OAAO7E,IAOf5B,MAAO6H,KCxBEM,IALYC,OAAOC,sCAAwCC,KAKhDC,aAAYN,GAAaO,aAA8CC,QCDhF,SAASC,KAKpB,OCZW,WAA+B,IAAD,EACKC,YAAe,GADpB,WACpCC,EADoC,KACjBC,EADiB,KA0B3C,OAtBAF,aAAgB,WACd,EAAAtI,EAAAC,OAAA,gEAEIwI,MAFJ,WAAAzI,EAAA,MAKU0I,IAAA,OACD7C,IAAS8C,MADR,IAEJ,aAAcC,EAAQ,SAP5B,sDAWIlJ,QAAQmJ,KAAR,MAXJ,uBAaIL,GAAmB,GACnBC,MAdJ,mFAmBC,IAEIF,EDlBqBO,GAQlB,kBAAC,IAAD,CAAUC,MAAOjB,IACb,kBAAC,IAAD,KACI,kBAACnB,GAAD,CAAYC,YEpBvB,UFqBW,kBAACoC,EAAA,UAAD,QANL,O,0DGlBfC,EAAOC,QAAU,IAA0B,kC","file":"static/js/app.a62a6843.chunk.js","sourcesContent":["import { StackScreenProps } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nimport { RootStackParamList } from '../types';\n\nexport default function NotFoundScreen({\n  navigation,\n}: StackScreenProps<RootStackParamList, 'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","/* eslint-disable */\n// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-2\",\n    \"aws_cognito_identity_pool_id\": \"us-east-2:0559c3ce-5a98-46c2-abad-7daaff3ac049\",\n    \"aws_cognito_region\": \"us-east-2\",\n    \"aws_user_pools_id\": \"us-east-2_I7jFlgb4c\",\n    \"aws_user_pools_web_client_id\": \"5k5cn88iho6gsp2car7o5nidgs\",\n    \"oauth\": {}\n};\n\n\nexport default awsmobile;\n","import { StyleSheet } from 'react-native'\n\nexport default StyleSheet.create({\n    input: {\n        height: 50,\n        backgroundColor: '#ededed',\n        marginBottom: 30,\n        width: '33%',\n    },\n    container: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: '#F5FCFF',\n    },\n    button: {\n        marginBottom: 20,\n    },\n    title: {\n        fontSize: 20,\n        fontWeight: 'bold',\n    },\n    separator: {\n        marginVertical: 30,\n        height: 1,\n        width: '80%',\n    },\n})\n","import { AppDispatch } from '../ts/types'\nimport { ERROR } from './actionTypes'\n\nexport const logError = (e: Error) => (dispatch: AppDispatch) => {\n    console.error(e)\n    dispatch({ type: ERROR, payload: e })\n}\n","export const ERROR = 'ERROR'\n","import { AppDispatch } from '../../ts/types'\nimport { FetchResponse } from '../../ts/interfaces'\n\nexport default (dispatch: AppDispatch, actionType: string) => async (\n    res: FetchResponse\n) => {\n    const text: string = await res.text()\n    const action = { type: actionType, payload: text }\n    dispatch(action)\n}\n","import { FetchResponse } from '../../ts/interfaces'\nimport { NetworkError } from '../../error/errors'\n\nexport default (res: FetchResponse) => {\n    if (res.ok) {\n        return res\n    } else {\n        throw NetworkError(res)\n    }\n}\n","import { FetchResponse } from '../ts/interfaces'\n\nexport const NetworkError = (res: FetchResponse) => {\n    const error = new Error('Error ' + res.status + ': ' + res.statusText)\n}\n","import { ADD_TEST, SIGN_IN_FAIL, SIGN_IN_SUCCESS} from './ActionTypes'\nimport {  AppDispatch } from '../ts/types'\nimport { logError } from '../error/actionCreators'\n\nimport dispatchResText from './utilities/dispatchResText'\nimport verifyRes from './utilities/verifyRes'\n\nexport const fetchTest = async (dispatch: AppDispatch) => {\n    fetch('https://dev2.aedmarket.com/api/test')\n        .then(verifyRes)\n        .then(dispatchResText(dispatch, ADD_TEST))\n        .catch((e) => dispatch(logError(e)))\n}\n\nexport const setTest = (val: string) => async (dispatch: AppDispatch) => {\n    const options = {\n        body: val,\n        method: 'POST',\n    } \n\n    fetch('https://dev2.aedmarket.com/api/test', options)\n        .then(verifyRes)\n        .then(() => dispatch({ type: ADD_TEST, payload: val }))\n        .catch((e) => dispatch(logError(e)))\n}\n\n/*\ndispatch error actions might be a good way to handle errors..\n\nmaybe try to keep function pure with a pattern like this:\nconst handleData = val => res => pipe(\n    verifyRes,\n    (_) => dispatch({ type: ADD_TEST, payload: val }),\n)\n\nhandleData(val)(fetch(stuff))\n\nI'm not sure this is necessary as long as my thunks are compositions of pure functions, aside from the initial data request\nI like the idea of returning (resolving with) an action from every thunk: success, failure, null, error\nseems like a good idea for testing\n\n*/\n\nexport const signInSuccessful = () => ({type: SIGN_IN_SUCCESS, payload: null})\n","export const FETCH_TEST = 'FETCH_TEST'\nexport const ADD_TEST = 'ADD_TEST'\nexport const SIGN_IN_SUCCESS = 'SIGN_IN_SUCCESS'\nexport const SIGN_IN_FAIL = 'SIGN_IN_FAIL'\n","import React, { useRef, useState } from 'react'\nimport { connect } from 'react-redux'\nimport { Button, StyleSheet, TextInput, View } from 'react-native'\nimport PropTypes, { InferProps } from 'prop-types'\n\nimport Amplify, { Auth } from 'aws-amplify'\nimport config from '../aws-exports'\nAmplify.configure(config)\n\nimport styles from '../styles/styles'\n\nimport { AppDispatch, RootState } from '../ts/types'\nimport { signInSuccessful } from '../redux/ActionCreators'\n\nconst mapStateToProps = (state: RootState) => {\n    return {}\n}\n\nconst actionCreators = { signInSuccessful }\n\nconst propTypes = {\n    signInSuccessful: PropTypes.func.isRequired,\n}\n\ntype Props = InferProps<typeof propTypes>\n\nconst SignInScreen: React.FC<Props> = ({ navigation, signInSuccessful }) => {\n    const [authCode, setAuthCode] = useState('')\n    const email = useRef('')\n    const password = useRef('')\n\n    const signIn = () => {\n        Auth.signIn(email.current, password.current)\n            .then((user) => {\n                signInSuccessful()\n                // save user in state somewhere\n            })\n            .catch((err) => {\n                console.log('error signing in: ', err)\n            })\n    }\n\n    return (\n        <View style={styles.container}>\n            <TextInput\n                placeholder=\"Email\"\n                onChangeText={(value) => (email.current = value)}\n                style={styles.input}\n            />\n            <TextInput\n                placeholder=\"Password\"\n                secureTextEntry={true}\n                onChangeText={(value) => (password.current = value)}\n                style={styles.input}\n            />\n            <View style={styles.button} >\n            <Button title=\"Sign In\" onPress={signIn} />\n            </View>\n            <Button\n                title=\"Don't have an account? Sign up here.\"\n                onPress={() => navigation.navigate('sign-up')}\n            />\n        </View>\n    )\n}\n\nexport default connect(mapStateToProps, actionCreators)(SignInScreen)\n","import React, { useRef, useState } from 'react'\nimport { connect } from 'react-redux'\nimport { Button, StyleSheet, TextInput, View } from 'react-native'\nimport PropTypes, { InferProps } from 'prop-types'\n\nimport Amplify, { Auth } from 'aws-amplify'\nimport config from '../aws-exports'\nAmplify.configure(config)\n\nimport styles from '../styles/styles'\n\nimport { AppDispatch, RootState } from '../ts/types'\nimport { signInSuccessful } from '../redux/ActionCreators'\n\nconst mapStateToProps = (state: RootState) => {\n    return {}\n}\n\nconst actionCreators = { signInSuccessful }\n\nconst propTypes = {\n    signInSuccessful: PropTypes.func.isRequired,\n}\n\ntype Props = InferProps<typeof propTypes>\n\nconst SignUpScreen: React.FC<Props> = ({ signInSuccessful }) => {\n    const [authCode, setAuthCode] = useState('')\n    const email = useRef('')\n    const password = useRef('')\n\n    const onChangeText = (authCode: string) => {\n        setAuthCode(authCode)\n    }\n    const signUp = () => {\n        Auth.signUp({\n            username: 'siege.hatch@gmail.com',\n            password: 'testpassword',\n        })\n            .then((res) => {\n                console.log('successful signup: ', res)\n            })\n            .catch((err) => {\n                console.log('error signing up: ', err)\n            })\n    }\n    const confirmUser = () => {\n        Auth.confirmSignUp('siege.hatch@gmail.com', authCode)\n            .then((res) => {\n                console.log('successful confirmation: ', res)\n            })\n            .catch((err) => {\n                console.log('error confirming user: ', err)\n            })\n    }\n\n    return (\n        <View style={styles.container}>\n            <TextInput\n                placeholder=\"Email\"\n                onChangeText={(value) => (email.current = value)}\n                style={styles.input}\n            />\n            <TextInput\n                placeholder=\"Input Code\"\n                onChangeText={(value) => onChangeText(value)}\n                style={styles.input}\n            />\n            <View style={styles.button}>\n                <Button title=\"Sign Up\" onPress={signUp} />\n            </View>\n            <Button title=\"Confirm User\" onPress={confirmUser} />\n        </View>\n    )\n}\n\nexport default connect(mapStateToProps, actionCreators)(SignUpScreen)\n","import React from 'react'\nimport { createStackNavigator } from '@react-navigation/stack'\n\nimport SignInScreen from '../screens/SignInScreen'\nimport SignUpScreen from '../screens/SignUpScreen'\n\nconst Stack = createStackNavigator()\n\nconst AuthNavigator = () => (\n        <Stack.Navigator initialRouteName=\"sign-in\">\n            <Stack.Screen name=\"sign-in\" component={SignInScreen} options={{ title: 'Sign In' }} />\n            <Stack.Screen name=\"sign-up\" component={SignUpScreen} options={{ title: 'Sign Up' }} />\n        </Stack.Navigator>\n)\n\nexport default AuthNavigator\n","const tintColorLight = '#2f95dc';\nconst tintColorDark = '#fff';\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n  },\n};\n","import * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import React, { useRef, useEffect } from 'react'\nimport { Button, StyleSheet, TextInput } from 'react-native'\nimport { connect } from 'react-redux'\nimport PropTypes, { InferProps } from 'prop-types'\nimport * as Linking from 'expo-linking'\n\nimport EditScreenInfo from '../components/EditScreenInfo'\nimport { Text, View } from '../components/Themed'\n\nimport { fetchTest, setTest } from '../redux/ActionCreators'\n\nimport styles from '../styles/styles'\n\nimport { AppDispatch, RootState } from '../ts/types'\n\nconst mapStateToProps = (state: RootState) => {\n    const test = state.test\n    return test\n}\n\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\n    //returning the void operator prevents react complaining about a returned value to useEffect\n    fetchTest: () => void dispatch(fetchTest),\n    setTest: (val: string) => void dispatch(setTest(val)),\n})\n\nconst propTypes = {\n    fetchTest: PropTypes.func.isRequired,\n    setTest: PropTypes.func.isRequired,\n    test: PropTypes.string.isRequired,\n}\n\ntype Props = InferProps<typeof propTypes>\n\nconst TabOneScreen: React.FC<Props> = (props) => {\n    const newValue: any = useRef()\n    const setNewValue = (val: string) => (newValue.current = val)\n    useEffect(() => {\n        props.fetchTest()\n        newValue.current = ''\n    }, [])\n\n    return (\n        <View style={styles.container}>\n            <Text style={styles.title}> {'Stored Value: ' + props.test} </Text>\n            <View\n                style={styles.separator}\n                lightColor=\"#eee\"\n                darkColor=\"rgba(255,255,255,0.1)\"\n            />\n            <TextInput\n                placeholder=\"Enter new value here..\"\n                //this cause a rerender on every keystroke\n                onChangeText={(val) => {\n                    setNewValue(val)\n                }}\n                style={styles.input}\n            />\n            <Button\n                onPress={() => props.setTest(newValue.current)}\n                title=\"Update Value\"\n            />\n        </View>\n    )\n}\n\nTabOneScreen.propTypes = propTypes\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TabOneScreen)\n","import * as React from 'react';\nimport { Button, StyleSheet } from 'react-native';\nimport * as Linking from 'expo-linking'\n\nimport styles from '../styles/styles'\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\n\nexport default function TabTwoScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Tab Two</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n            <Button\n                onPress={() => Linking.openURL('https://www.aedmarket.com/collections/new-aeds-1/products/defibtech-lifeline-view-aed')}\n                title=\"Shopify Link\"\n            />\n    </View>\n  );\n}\n","import { Ionicons } from '@expo/vector-icons';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\nimport TabOneScreen from '../screens/TabOneScreen';\nimport TabTwoScreen from '../screens/TabTwoScreen';\nimport { BottomTabParamList, TabOneParamList, TabTwoParamList } from '../types';\n\nconst BottomTab = createBottomTabNavigator<BottomTabParamList>();\n\nexport default function BottomTabNavigator() {\n  const colorScheme = useColorScheme();\n\n  return (\n    <BottomTab.Navigator\n      initialRouteName=\"TabOne\"\n      tabBarOptions={{ activeTintColor: Colors[colorScheme].tint }}>\n      <BottomTab.Screen\n        name=\"TabOne\"\n        component={TabOneNavigator}\n        options={{\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"ios-code\" color={color} />,\n        }}\n      />\n      <BottomTab.Screen\n        name=\"TabTwo\"\n        component={TabTwoNavigator}\n        options={{\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"ios-code\" color={color} />,\n        }}\n      />\n    </BottomTab.Navigator>\n  );\n}\n\n// You can explore the built-in icon families and icons on the web at:\n// https://icons.expo.fyi/\nfunction TabBarIcon(props: { name: string; color: string }) {\n  return <Ionicons size={30} style={{ marginBottom: -3 }} {...props} />;\n}\n\n// Each tab has its own navigation stack, you can read more about this pattern here:\n// https://reactnavigation.org/docs/tab-based-navigation#a-stack-navigator-for-each-tab\nconst TabOneStack = createStackNavigator<TabOneParamList>();\n\nfunction TabOneNavigator() {\n  return (\n    <TabOneStack.Navigator>\n      <TabOneStack.Screen\n        name=\"TabOneScreen\"\n        component={TabOneScreen}\n        options={{ headerTitle: 'Tab One Title' }}\n      />\n    </TabOneStack.Navigator>\n  );\n}\n\nconst TabTwoStack = createStackNavigator<TabTwoParamList>();\n\nfunction TabTwoNavigator() {\n  return (\n    <TabTwoStack.Navigator>\n      <TabTwoStack.Screen\n        name=\"TabTwoScreen\"\n        component={TabTwoScreen}\n        options={{ headerTitle: 'Tab Two Title' }}\n      />\n    </TabTwoStack.Navigator>\n  );\n}\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes, { InferProps } from 'prop-types'\n\nimport AuthNavigator from './AuthNavigator'\nimport BottomTabNavigator from './BottomTabNavigator'\n\nimport { AppDispatch, RootState } from '../ts/types'\n\nconst mapStateToProps = (state: RootState) => {\n    const auth = state.auth.authenticated\n    return {auth}\n}\n\nconst propTypes = {\n    auth: PropTypes.bool.isRequired,\n}\n\ntype Props = InferProps<typeof propTypes>\n\n\nconst Root: React.FC<Props> = ({auth}) => {\n    if (auth) return <BottomTabNavigator />\n    return <AuthNavigator />\n}\n\nexport default connect(mapStateToProps)(Root)\n","import * as Linking from 'expo-linking'\n\nexport default {\n    prefixes: [Linking.makeUrl('/')],\n    config: {\n        screens: {\n            Root: {\n                screens: {\n                    TabOne: {\n                        screens: {\n                            TabOneScreen: 'one',\n                        },\n                    },\n                    TabTwo: {\n                        screens: {\n                            TabTwoScreen: 'two',\n                        },\n                    },\n                    AuthNavigator: {\n                        screens: {\n                            SignInScreen: 'sign-in',\n                            SignUpScreen: 'sign-up',\n                        },\n                    },\n                },\n                NotFound: '*',\n            },\n        },\n    },\n}\n","import { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { ColorSchemeName } from 'react-native';\n\nimport NotFoundScreen from '../screens/NotFoundScreen';\nimport { RootStackParamList } from '../types';\nimport Root from './Root';\nimport LinkingConfiguration from './LinkingConfiguration';\n\n// If you are not familiar with React Navigation, we recommend going through the\n// \"Fundamentals\" guide: https://reactnavigation.org/docs/getting-started\nexport default function Navigation({ colorScheme }: { colorScheme: ColorSchemeName }) {\n  return (\n    <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>\n      <RootNavigator />\n    </NavigationContainer>\n  );\n}\n\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator<RootStackParamList>();\n\nfunction RootNavigator() {\n  return (\n    <Stack.Navigator screenOptions={{ headerShown: false }}>\n      <Stack.Screen name=\"Root\" component={Root} />\n      <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ title: 'Oops!' }} />\n    </Stack.Navigator>\n  );\n}\n","import { Action } from '../ts/interfaces'\nimport { ERROR } from './actionTypes'\n\nconst INITIAL_STATE = {\n    errors: [],\n}\n\nconst errorReducer = (state = INITIAL_STATE, action: Action) => {\n    switch (action.type) {\n        case ERROR:\n            return { ...state, errors: state.errors.concat(action.payload) }\n        default:\n            return state\n    }\n}\n\nexport default errorReducer\n","import { combineReducers } from 'redux'\n\nimport { Action } from '../ts/interfaces'\nimport errorReducer from '../error/reducer'\n\nconst INITIAL_STATE = {\n    test: 'loading..',\n}\n\nconst AUTH_STATE = {\n    authenticated: false,\n}\n\nconst testReducer = (state = INITIAL_STATE, action: Action) => {\n    switch (action.type) {\n        case 'ADD_TEST':\n            return { ...state, test: action.payload }\n        default:\n            return state\n    }\n}\n\nconst authReducer = (state = AUTH_STATE, action: Action) => {\n    switch (action.type) {\n        case 'SIGN_IN_SUCCESS':\n            console.log('here!', state)\n            return { ...state, authenticated: true }\n        case 'SIGN_IN_FAIL':\n            return { ...state, authenticated: false }\n        default:\n            return state\n    }\n}\n\nexport const rootReducer = combineReducers({\n    test: testReducer,\n    auth: authReducer,\n    error: errorReducer,\n})\n","import { applyMiddleware, compose, createStore } from 'redux';\nimport thunk, { ThunkDispatch} from 'redux-thunk'\n\nimport {rootReducer} from './RootReducer'\nimport { Action } from '../ts/interfaces'\nimport { RootState } from '../ts/types'\n\n//@ts-ignore REDUX DEV TOOLS\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\n//this is how to get TypeScript to allow dispatch to accept a thunk or an action\ntype DispatchFunctionType = ThunkDispatch<RootState, undefined, Action>\n//export const appStore = createStore(rootReducer, composeEnhancers(applyMiddleware<DispatchFunctionType, Action>(thunk)))\nexport const appStore = createStore(rootReducer, applyMiddleware<DispatchFunctionType, Action>(thunk))\n","import { StatusBar } from 'expo-status-bar'\nimport React from 'react'\nimport { SafeAreaProvider } from 'react-native-safe-area-context'\nimport { Provider } from 'react-redux'\n\nimport useCachedResources from './hooks/useCachedResources'\nimport useColorScheme from './hooks/useColorScheme'\nimport Navigation from './navigation'\nimport { appStore } from './redux/ConfigureStore'\n\nimport AuthScreen from './screens/AuthScreen'\n\nexport default function App() {\n    const isLoadingComplete = useCachedResources()\n    const colorScheme = useColorScheme()\n    const authenticated = false\n\n    if (!isLoadingComplete) {\n        return null\n    } else {\n        return (\n            <Provider store={appStore}>\n                <SafeAreaProvider>\n                    <Navigation colorScheme={colorScheme} />\n                    <StatusBar />\n                </SafeAreaProvider>\n            </Provider>\n        )\n    }\n}\n","import { Ionicons } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","// useColorScheme from react-native does not support web currently. You can replace\n// this with react-native-appearance if you would like theme support on web.\nexport default function useColorScheme() {\n  return 'light';\n}","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}