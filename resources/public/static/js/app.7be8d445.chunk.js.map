{"version":3,"sources":["src/assets/fonts/SpaceMono-Regular.ttf","node_modules/moment/locale sync /^/.//.*$","src/utils/pendingActionType.ts","src/aed/actionTypes.ts","src/aed/reducer.ts","src/auth/actionTypes.ts","src/alert/reducer.ts","src/alert/actionTypes.ts","src/auth/reducer.ts","src/error/reducer.ts","src/error/actionTypes.ts","src/loading/reducer.ts","src/loading/actionTypes.ts","src/user/actionTypes.ts","src/user/reducer.ts","src/redux/RootReducer.ts","src/redux/ConfigureStore.ts","src/alert/actionCreators.ts","src/alert/services/setAlert.ts","src/utils/pendingAction.ts","src/auth/actionCreators.ts","aws-exports.js","src/auth/services/changePassword.ts","src/localStorage/storage.ts","src/localStorage/services/storageSave.ts","src/localStorage/services/deleteValue.ts","src/localStorage/actionCreators.ts","src/localStorage/actionTypes.ts","src/gql/actionCreators.ts","src/gql/actionTypes.ts","src/gql/services/gqlClient.ts","src/auth/services/clearAuthData.ts","src/auth/services/confirmUser.ts","src/auth/services/forgotPasswordCode.ts","src/auth/services/forgotPasswordSet.ts","src/auth/services/extractToken.ts","src/auth/services/handleAuthData.ts","src/auth/services/logout.ts","src/user/actionCreators.ts","src/user/queries/variables.ts","src/user/queries/createUserQuery.ts","src/auth/services/registerUser.ts","src/auth/services/setAuthToken.ts","src/localStorage/services/saveValue.ts","src/auth/services/saveToken.ts","src/auth/services/signUp.ts","src/user/queries/getUserQuery.ts","src/user/services/getUser.ts","src/user/queries/updateUserQuery.ts","src/user/services/updateUser.ts","src/aed/actionCreators.ts","src/aed/queries/variables.ts","src/aed/queries/addAedQuery.ts","src/aed/queries/getAedsQuery.ts","src/aed/queries/removeAedQuery.ts","src/aed/queries/updateAedQuery.ts","src/aed/services/addAed.ts","src/aed/services/getAeds.ts","src/aed/services/removeAed.ts","src/aed/services/reportUse.ts","src/aed/services/updateAed.ts","src/auth/services/signIn.ts","src/auth/services/loadAuthToken.ts","src/localStorage/services/loadValue.ts","src/navigation/RootNavigation.ts","src/screens/NotFoundScreen.tsx","src/utils/isMobile.ts","src/styles/styles.ts","src/components/StyledButton.tsx","src/components/StyledTextInput.tsx","src/screens/ContentArea.tsx","src/screens/ScreenTemplate.tsx","src/components/FormError.tsx","src/loading/services/loading.ts","src/loading/actionCreators.ts","src/screens/SignInScreen.tsx","src/screens/ConfirmSignUpScreen.tsx","src/screens/SignUpScreen.tsx","src/screens/ForgotPasswordCode.tsx","src/screens/ForgotPasswordSet.tsx","src/navigation/AuthNavigator.tsx","src/constants/Colors.ts","src/components/Themed.tsx","src/aed/component.tsx","src/screens/AedScreen.tsx","src/components/DatePicker/component.tsx","src/components/DatePicker/index.tsx","src/screens/ReportUse.tsx","src/components/CardList.tsx","src/aed/components/AedCard.tsx","src/screens/SelectAed.tsx","src/screens/AedInspectionScreen.tsx","src/screens/AddAed/AccessoriesScreen.tsx","src/components/CardSections.tsx","src/aed/components/AedsByBrand.tsx","src/screens/AddAed/AddAedScreen.tsx","src/screens/AddAed/DetailsScreen.tsx","src/screens/AedDetailsScreen.tsx","src/screens/RemoveAedScreen.tsx","src/navigation/AedNavigator.tsx","src/user/component.tsx","src/screens/HomeScreen.tsx","src/navigation/HomeNavigator.tsx","src/screens/ChangePassword.tsx","src/screens/EditUserInfoScreen.tsx","src/screens/UserInfoScreen.tsx","src/navigation/UserNavigator.tsx","src/navigation/TabNavigator.tsx","src/navigation/Root.tsx","src/navigation/LinkingConfiguration.ts","src/navigation/index.tsx","src/loading/component.tsx","src/alert/component.tsx","src/App.tsx","src/hooks/useCachedResources.ts","src/hooks/useColorScheme.web.ts"],"names":["module","exports","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","pendingActionType","type","pending","success","failure","ADD_AED","GETTING_AEDS","UPDATE_AED","REMOVE_AED","REPORT_USE","INITIAL_STATE","addAed","state","aed","removeAed","filter","x","aedReducer","action","AT","payload","CHANGE_PASSWORD","CONFIRM_USER","FORGOT_PASSWORD_CODE","FORGOT_PASSWORD_SET","REGISTER_USER","SIGN_IN","SIGN_UP","ALERT_STATE","alerts","alertReducer","alert","concat","AUTH_STATE","authenticated","authToken","authReducer","user","email","errors","errorReducer","console","log","LOADING_STATE","loading","loadingReducer","GET_USER","UPDATE_USER","firstName","lastName","phoneNumber","role","aeds","userReducer","rootReducer","combineReducers","auth","error","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middleware","createThunkErrorHandlerMiddleware","onError","err","message","logoutThunk","thunkMiddleware","appStore","createStore","applyMiddleware","dispatch","issueAlert","removeAlert","setAlert","msg","alertType","timeout","uuidv4","setTimeout","pendingAction","changingPassword","aT","confirmingUser","forgottingPasswordCode","forgottingPasswordSet","registeringUser","signingIn","signingUp","awsmobile","Amplify","configure","config","request","oldPassword","newPassword","Auth","currentAuthenticatedUser","then","changePassword","data","Promise","reject","service","catch","storage","Storage","size","storageBackend","localStorage","defaultExpires","enableCache","sync","storageSave","key","value","save","expires","deleteValue","deletingValue","deletingValueSuccess","deletingValueFail","gqlRetry","gqlClient","GraphQLClient","headers","authorization","fetch","url","fetchOptions","delay","limit","later","jitter","Math","floor","random","recur","timesTried","crossFetch","setAuthToken","token","setHeader","deleteAuthToken","makeRequest","query","variables","clearAuthData","a","async","userInfo","authCode","confirmSignUp","registerUser","confirmUser","forgotPassword","userName","forgotPasswordCode","forgotPasswordSubmit","forgotPasswordSet","extractToken","currentSession","accessToken","jwtToken","handleAuthData","saveToken","logout","gettingUser","updateUserState","updatingUser","userFields","userRecord","createUserQuery","gql","record","res","userCreateOne","saveValue","savingValue","savingValueSuccess","savingValueFail","password","signUp","username","getUserQuery","userOne","response","status","getUser","updateUserQuery","userId","userUpdateById","updateUser","addingAed","gettingAeds","updatingAed","removingAed","reportingUse","aedFields","aedRecord","addAedQuery","getAedsQuery","removeAedQuery","updateAedQuery","aedInfo","lastInspected","Date","aedCreateOne","aedMany","getAeds","aedId","aedRemoveById","useReport","reportUse","aedUpdateById","updateAed","signIn","loadAuthToken","load","authData","navigationRef","React","NotFoundScreen","navigation","View","style","styles","container","Text","title","TouchableOpacity","onPress","replace","link","linkText","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","padding","fontSize","fontWeight","marginTop","paddingVertical","color","isMobile","Platform","OS","width","Dimensions","get","height","screenTemplate","contentArea","hp","wp","cardSections","flexDirection","cardSection","marginBottom","cardList","flexWrap","card","aedImage","input","button","separator","marginVertical","head","text","margin","position","left","right","top","bottom","formError","alertStyles","alertContainer","zIndex","StyledButton","Button","StyledTextInput","props","TextInput","label","placeholder","defaultValue","editable","multiline","textAlignVertical","numberOfLines","secureTextEntry","onChangeText","mode","autoCapitalize","autoComplete","ContentArea","children","ScreenTemplate","FormError","isError","promise","finally","connect","StackNavigationProp","PropTypes","func","isRequired","useForm","control","handleSubmit","getValues","setValue","onChangeField","name","trim","KeyboardAvoidingView","behavior","select","ios","render","onChange","onBlur","rules","required","validate","length","valid","test","minLength","toLowerCase","navigate","shape","route","formValues","params","form","justSignedUp","register","resetScrollToCoords","y","contentContainerStyle","flexGrow","scrollEnabled","lastname","string","signUpEmail","signUpThunk","navigateToConfirm","confirmPassword","Stack","createStackNavigator","AuthNavigator","Navigator","initialRouteName","Screen","component","ConfirmSignUpScreen","options","ForgotPasswordCode","ForgotPasswordSet","SignInScreen","SignUpScreen","light","background","tint","tabIconDefault","tabIconSelected","dark","useThemeColor","colorName","colorFromProps","Colors","lightColor","darkColor","otherProps","renderAed","index","useNavigation","daysToExpirePads","moment","pads","expire","diff","daysToExpireBattery","battery","daysSinceInspection","daysToExpire","statusColor","Pressable","screen","marginLeft","make","model","paddingLeft","location","propTypes","any","AedScreen","hasAeds","userData","logOut","date","done","setDate","setShow","show","Modal","animationType","transparent","visible","onRequestClose","borderRadius","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","minDate","maxDate","add","onDatePicked","DatePicker","selectedDate","EditUserInfoScreen","useState","showDatePicker","setShowDatePicker","useDate","setUseDate","responderName","patientName","incidentLocation","pointerEvents","format","CardList","keyExtractor","cardFn","FlatList","renderItem","numColumns","aedImages","JSON","parse","AedCard","item","Image","source","uri","SelectAed","paddingTop","tinyLogo","logo","nextScreen","extractor","selected","setSelected","useEffect","serialNumber","SelectMultiple","items","selectedItems","onSelectionsChange","selections","some","comments","AedInspectionScreen","field","pickerField","setPickerField","padsExpiration","setPadsExpiration","batteryExpiration","setBatteryExpiration","expirationData","set","AccessoriesScreen","CardSections","AedsByBrand","models","allAeds","AddAedScreen","DetailsScreen","AedDetailsScreen","RemoveAedsScreen","AedStack","AedNavigator","addListener","CommonActions","reset","routes","screenOptions","headerShown","headerTitle","RemoveAedScreen","ReportUse","HomeScreen","HomeStack","HomeNavigator","UserInfoScreen","UserStack","UserNavigator","ChangePassword","Tab","createMaterialTopTabNavigator","TabBarIcon","Ionicons","setVisible","keyboardEventListeners","useRef","listeners","current","push","Keyboard","forEach","event","remove","useTabBarVisibility","tabBarOptions","activeTintColor","display","tabBarPosition","tabBarIcon","bool","WrappedTabNavigator","TabNavigator","getHeaderTitle","getFocusedRouteNameFromRoute","prefixes","Linking","screens","Root","Tabs","Home","AedDetailScreen","aedInspection","addDetails","accessories","Navigation","colorScheme","NavigationContainer","linking","LinkingConfiguration","ref","RootNavigator","ActivityIndicator","array","registerRootComponent","isLoadingComplete","setLoadingComplete","SplashScreen","all","Font","font","require","warn","useCachedResources","store"],"mappings":"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","file":"static/js/app.7be8d445.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";","var map = {\n\t\"./af\": 346,\n\t\"./af.js\": 346,\n\t\"./ar\": 347,\n\t\"./ar-dz\": 348,\n\t\"./ar-dz.js\": 348,\n\t\"./ar-kw\": 349,\n\t\"./ar-kw.js\": 349,\n\t\"./ar-ly\": 350,\n\t\"./ar-ly.js\": 350,\n\t\"./ar-ma\": 351,\n\t\"./ar-ma.js\": 351,\n\t\"./ar-sa\": 352,\n\t\"./ar-sa.js\": 352,\n\t\"./ar-tn\": 353,\n\t\"./ar-tn.js\": 353,\n\t\"./ar.js\": 347,\n\t\"./az\": 354,\n\t\"./az.js\": 354,\n\t\"./be\": 355,\n\t\"./be.js\": 355,\n\t\"./bg\": 356,\n\t\"./bg.js\": 356,\n\t\"./bm\": 357,\n\t\"./bm.js\": 357,\n\t\"./bn\": 358,\n\t\"./bn-bd\": 359,\n\t\"./bn-bd.js\": 359,\n\t\"./bn.js\": 358,\n\t\"./bo\": 360,\n\t\"./bo.js\": 360,\n\t\"./br\": 361,\n\t\"./br.js\": 361,\n\t\"./bs\": 362,\n\t\"./bs.js\": 362,\n\t\"./ca\": 363,\n\t\"./ca.js\": 363,\n\t\"./cs\": 364,\n\t\"./cs.js\": 364,\n\t\"./cv\": 365,\n\t\"./cv.js\": 365,\n\t\"./cy\": 366,\n\t\"./cy.js\": 366,\n\t\"./da\": 367,\n\t\"./da.js\": 367,\n\t\"./de\": 368,\n\t\"./de-at\": 369,\n\t\"./de-at.js\": 369,\n\t\"./de-ch\": 370,\n\t\"./de-ch.js\": 370,\n\t\"./de.js\": 368,\n\t\"./dv\": 371,\n\t\"./dv.js\": 371,\n\t\"./el\": 372,\n\t\"./el.js\": 372,\n\t\"./en-au\": 373,\n\t\"./en-au.js\": 373,\n\t\"./en-ca\": 374,\n\t\"./en-ca.js\": 374,\n\t\"./en-gb\": 375,\n\t\"./en-gb.js\": 375,\n\t\"./en-ie\": 376,\n\t\"./en-ie.js\": 376,\n\t\"./en-il\": 377,\n\t\"./en-il.js\": 377,\n\t\"./en-in\": 378,\n\t\"./en-in.js\": 378,\n\t\"./en-nz\": 379,\n\t\"./en-nz.js\": 379,\n\t\"./en-sg\": 380,\n\t\"./en-sg.js\": 380,\n\t\"./eo\": 381,\n\t\"./eo.js\": 381,\n\t\"./es\": 382,\n\t\"./es-do\": 383,\n\t\"./es-do.js\": 383,\n\t\"./es-mx\": 384,\n\t\"./es-mx.js\": 384,\n\t\"./es-us\": 385,\n\t\"./es-us.js\": 385,\n\t\"./es.js\": 382,\n\t\"./et\": 386,\n\t\"./et.js\": 386,\n\t\"./eu\": 387,\n\t\"./eu.js\": 387,\n\t\"./fa\": 388,\n\t\"./fa.js\": 388,\n\t\"./fi\": 389,\n\t\"./fi.js\": 389,\n\t\"./fil\": 390,\n\t\"./fil.js\": 390,\n\t\"./fo\": 391,\n\t\"./fo.js\": 391,\n\t\"./fr\": 392,\n\t\"./fr-ca\": 393,\n\t\"./fr-ca.js\": 393,\n\t\"./fr-ch\": 394,\n\t\"./fr-ch.js\": 394,\n\t\"./fr.js\": 392,\n\t\"./fy\": 395,\n\t\"./fy.js\": 395,\n\t\"./ga\": 396,\n\t\"./ga.js\": 396,\n\t\"./gd\": 397,\n\t\"./gd.js\": 397,\n\t\"./gl\": 398,\n\t\"./gl.js\": 398,\n\t\"./gom-deva\": 399,\n\t\"./gom-deva.js\": 399,\n\t\"./gom-latn\": 400,\n\t\"./gom-latn.js\": 400,\n\t\"./gu\": 401,\n\t\"./gu.js\": 401,\n\t\"./he\": 402,\n\t\"./he.js\": 402,\n\t\"./hi\": 403,\n\t\"./hi.js\": 403,\n\t\"./hr\": 404,\n\t\"./hr.js\": 404,\n\t\"./hu\": 405,\n\t\"./hu.js\": 405,\n\t\"./hy-am\": 406,\n\t\"./hy-am.js\": 406,\n\t\"./id\": 407,\n\t\"./id.js\": 407,\n\t\"./is\": 408,\n\t\"./is.js\": 408,\n\t\"./it\": 409,\n\t\"./it-ch\": 410,\n\t\"./it-ch.js\": 410,\n\t\"./it.js\": 409,\n\t\"./ja\": 411,\n\t\"./ja.js\": 411,\n\t\"./jv\": 412,\n\t\"./jv.js\": 412,\n\t\"./ka\": 413,\n\t\"./ka.js\": 413,\n\t\"./kk\": 414,\n\t\"./kk.js\": 414,\n\t\"./km\": 415,\n\t\"./km.js\": 415,\n\t\"./kn\": 416,\n\t\"./kn.js\": 416,\n\t\"./ko\": 417,\n\t\"./ko.js\": 417,\n\t\"./ku\": 418,\n\t\"./ku.js\": 418,\n\t\"./ky\": 419,\n\t\"./ky.js\": 419,\n\t\"./lb\": 420,\n\t\"./lb.js\": 420,\n\t\"./lo\": 421,\n\t\"./lo.js\": 421,\n\t\"./lt\": 422,\n\t\"./lt.js\": 422,\n\t\"./lv\": 423,\n\t\"./lv.js\": 423,\n\t\"./me\": 424,\n\t\"./me.js\": 424,\n\t\"./mi\": 425,\n\t\"./mi.js\": 425,\n\t\"./mk\": 426,\n\t\"./mk.js\": 426,\n\t\"./ml\": 427,\n\t\"./ml.js\": 427,\n\t\"./mn\": 428,\n\t\"./mn.js\": 428,\n\t\"./mr\": 429,\n\t\"./mr.js\": 429,\n\t\"./ms\": 430,\n\t\"./ms-my\": 431,\n\t\"./ms-my.js\": 431,\n\t\"./ms.js\": 430,\n\t\"./mt\": 432,\n\t\"./mt.js\": 432,\n\t\"./my\": 433,\n\t\"./my.js\": 433,\n\t\"./nb\": 434,\n\t\"./nb.js\": 434,\n\t\"./ne\": 435,\n\t\"./ne.js\": 435,\n\t\"./nl\": 436,\n\t\"./nl-be\": 437,\n\t\"./nl-be.js\": 437,\n\t\"./nl.js\": 436,\n\t\"./nn\": 438,\n\t\"./nn.js\": 438,\n\t\"./oc-lnc\": 439,\n\t\"./oc-lnc.js\": 439,\n\t\"./pa-in\": 440,\n\t\"./pa-in.js\": 440,\n\t\"./pl\": 441,\n\t\"./pl.js\": 441,\n\t\"./pt\": 442,\n\t\"./pt-br\": 443,\n\t\"./pt-br.js\": 443,\n\t\"./pt.js\": 442,\n\t\"./ro\": 444,\n\t\"./ro.js\": 444,\n\t\"./ru\": 445,\n\t\"./ru.js\": 445,\n\t\"./sd\": 446,\n\t\"./sd.js\": 446,\n\t\"./se\": 447,\n\t\"./se.js\": 447,\n\t\"./si\": 448,\n\t\"./si.js\": 448,\n\t\"./sk\": 449,\n\t\"./sk.js\": 449,\n\t\"./sl\": 450,\n\t\"./sl.js\": 450,\n\t\"./sq\": 451,\n\t\"./sq.js\": 451,\n\t\"./sr\": 452,\n\t\"./sr-cyrl\": 453,\n\t\"./sr-cyrl.js\": 453,\n\t\"./sr.js\": 452,\n\t\"./ss\": 454,\n\t\"./ss.js\": 454,\n\t\"./sv\": 455,\n\t\"./sv.js\": 455,\n\t\"./sw\": 456,\n\t\"./sw.js\": 456,\n\t\"./ta\": 457,\n\t\"./ta.js\": 457,\n\t\"./te\": 458,\n\t\"./te.js\": 458,\n\t\"./tet\": 459,\n\t\"./tet.js\": 459,\n\t\"./tg\": 460,\n\t\"./tg.js\": 460,\n\t\"./th\": 461,\n\t\"./th.js\": 461,\n\t\"./tk\": 462,\n\t\"./tk.js\": 462,\n\t\"./tl-ph\": 463,\n\t\"./tl-ph.js\": 463,\n\t\"./tlh\": 464,\n\t\"./tlh.js\": 464,\n\t\"./tr\": 465,\n\t\"./tr.js\": 465,\n\t\"./tzl\": 466,\n\t\"./tzl.js\": 466,\n\t\"./tzm\": 467,\n\t\"./tzm-latn\": 468,\n\t\"./tzm-latn.js\": 468,\n\t\"./tzm.js\": 467,\n\t\"./ug-cn\": 469,\n\t\"./ug-cn.js\": 469,\n\t\"./uk\": 470,\n\t\"./uk.js\": 470,\n\t\"./ur\": 471,\n\t\"./ur.js\": 471,\n\t\"./uz\": 472,\n\t\"./uz-latn\": 473,\n\t\"./uz-latn.js\": 473,\n\t\"./uz.js\": 472,\n\t\"./vi\": 474,\n\t\"./vi.js\": 474,\n\t\"./x-pseudo\": 475,\n\t\"./x-pseudo.js\": 475,\n\t\"./yo\": 476,\n\t\"./yo.js\": 476,\n\t\"./zh-cn\": 477,\n\t\"./zh-cn.js\": 477,\n\t\"./zh-hk\": 478,\n\t\"./zh-hk.js\": 478,\n\t\"./zh-mo\": 479,\n\t\"./zh-mo.js\": 479,\n\t\"./zh-tw\": 480,\n\t\"./zh-tw.js\": 480\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 752;","export const pendingActionType = (\n    type: string,\n) => ({\n    pending: type + '_PENDING',\n    success: type + '_SUCCESS',\n    failure: type + '_FAILURE',\n})\n\nexport type PendingActionType = {\n    pending: string,\n    success: string,\n    failure: string,\n}\n","import { pendingActionType } from '../utils/pendingActionType'\n\nexport const ADD_AED = pendingActionType('ADD_AED')\nexport const GETTING_AEDS = pendingActionType('GETTING_AEDS')\nexport const UPDATE_AED = pendingActionType('UPDATE_AED')\nexport const REMOVE_AED = pendingActionType('REMOVE_AED')\nexport const REPORT_USE = pendingActionType('REPORT_USE')\n","import { Action } from '../ts/interfaces'\nimport * as AT from './actionTypes'\n//import {} from './actionTypes'\nconst INITIAL_STATE = []\n\nconst aedReducer = (state = INITIAL_STATE, action: Action) => {\n    switch (action.type) {\n        case AT.ADD_AED.success:\n            return addAed(state, action.payload)\n        case AT.GETTING_AEDS.success:\n            return action.payload\n        case AT.REMOVE_AED.success:\n            return removeAed(state, action.payload)\n        case AT.UPDATE_AED.success:\n            state = removeAed(state, action.payload)\n            return addAed(state, action.payload)\n        default:\n            return state\n    }\n}\n\nfunction addAed(state, aed) {\n    return [...state, { ...aed }]\n}\n\nfunction removeAed(state, aed) {\n    return state.filter((x) => x.id !== aed.id)\n}\n\nexport default aedReducer\n","import { pendingActionType } from '../utils/pendingActionType'\n\nexport const CHANGE_PASSWORD = pendingActionType('CHANGE_PASSWORD')\nexport const CONFIRM_USER = pendingActionType('CONFIRM_USER')\nexport const DELETE_AUTH_TOKEN = 'DELETE_AUTH_TOKEN'\nexport const DELETE_API_TOKEN = 'DELETE_API_TOKEN'\nexport const FORGOT_PASSWORD_CODE = pendingActionType('FORGOT_PASSWORD_CODE')\nexport const FORGOT_PASSWORD_SET = pendingActionType('FORGOT_PASSWORD_SET')\nexport const LOG_OUT = 'LOG_OUT'\nexport const PASSWORD_RESET = pendingActionType('RESET_PASSWORD')\nexport const REGISTER_USER = pendingActionType('REGISTER_USER')\nexport const SET_AUTH_TOKEN = 'SET_AUTH_TOKEN'\nexport const UPDATE_USER = 'UPDATE_USER'\nexport const SET_API_TOKEN = 'SET_API_TOKEN'\nexport const SIGN_IN = pendingActionType('SIGN_IN')\nexport const SIGN_UP = pendingActionType('SIGN_UP')\n","import {REMOVE_ALERT, SET_ALERT} from '../redux/ActionTypes'\nimport { Action } from '../ts/interfaces'\n\ninterface IAlertState {\n    alerts: [\n        {\n            id: number\n            msg: string\n            type: string\n        }?\n    ]\n}\n\nconst ALERT_STATE: IAlertState = {\n    alerts: [],\n}\n\nconst alertReducer = (state = ALERT_STATE, action: Action) => {\n    switch (action.type) {\n        case REMOVE_ALERT:\n            return {\n                ...state,\n                alerts: state.alerts.filter(alert => alert.id !== action.payload),\n            }\n        case SET_ALERT:\n            return {\n                ...state,\n                alerts: state.alerts.concat(action.payload),\n            }\n        default:\n            return state\n    }\n}\n\nexport default alertReducer\n","export const REMOVE_ALERT = 'REMOVE_ALERT'\nexport const SET_ALERT = 'SET_ALERT'\n","import { Action } from '../ts/interfaces'\nimport {\n    DELETE_AUTH_TOKEN,\n    LOG_OUT,\n    SET_AUTH_TOKEN,\n    SIGN_IN,\n} from './actionTypes'\nconst AUTH_STATE = {\n    authenticated: false,\n    authToken: null,\n}\n\nconst authReducer = (state = AUTH_STATE, action: Action) => {\n    switch (action.type) {\n        case DELETE_AUTH_TOKEN:\n            return { ...state, authToken: null }\n        case LOG_OUT:\n            return {\n                ...state,\n                authenticated: false,\n                authToken: null,\n                user: { email: '' },\n            }\n        case SET_AUTH_TOKEN:\n            return { ...state, authToken: action.payload }\n        case SIGN_IN.success:\n            return { ...state, authenticated: true }\n        case SIGN_IN.failure:\n            return { ...state, authenticated: false }\n        default:\n            return state\n    }\n}\n\nexport default authReducer\n","import { Action } from '../ts/interfaces'\nimport { ERROR } from './actionTypes'\n\nconst INITIAL_STATE = {\n    errors: [],\n}\n\nconst errorReducer = (state = INITIAL_STATE, action: Action) => {\n    switch (action.type) {\n        case ERROR:\n            console.log('ACTION', action)\n            return { ...state, errors: state.errors.concat(action.payload) }\n        default:\n            return state\n    }\n}\n\nexport default errorReducer\n","export const ERROR = 'ERROR'\n","import {REMOVE_ALERT, SET_ALERT} from '../redux/ActionTypes'\nimport { Action } from '../ts/interfaces'\n\nimport { DONE_LOADING, LOADING } from '../redux/ActionTypes'\n\ninterface ILoadingState {\n    loading: boolean\n}\n\nconst LOADING_STATE: ILoadingState = {\n    loading: false\n}\n\nconst loadingReducer = (state = LOADING_STATE, action: Action) => {\n    switch (action.type) {\n        case DONE_LOADING:\n            return {\n                ...state,\n                loading: false,\n            }\n        case LOADING:\n            return {\n                ...state,\n                loading: true,\n            }\n        default:\n            return state\n    }\n}\n\nexport default loadingReducer\n","export const LOADING = 'LOADING'\nexport const DONE_LOADING = 'DONE_LOADING'\n","import { pendingActionType } from '../utils/pendingActionType'\n\nexport const GET_USER = pendingActionType('GET_USER')\nexport const UPDATE_USER_STATE = 'UPDATE_USER_STATE'\nexport const UPDATE_USER = pendingActionType('UPDATE_USER')\n","import { Action } from '../ts/interfaces'\nimport { UPDATE_USER_STATE } from './actionTypes'\nconst INITIAL_STATE = {\n    email: 'ERROR',\n    firstName: 'ERROR',\n    lastName: 'ERROR',\n    phoneNumber: 'ERROR',\n    role: 'USER',\n    aeds: []\n}\n\nconst userReducer = (state = INITIAL_STATE, action: Action) => {\n    switch (action.type) {\n        case UPDATE_USER_STATE:\n            return { ...action.payload }\n        default:\n            return state\n    }\n}\n\nexport default userReducer\n","import { combineReducers } from 'redux'\n\nimport { Action } from '../ts/interfaces'\nimport aedReducer from '../aed/reducer'\nimport alertReducer from '../alert/reducer'\nimport authReducer from '../auth/reducer'\nimport errorReducer from '../error/reducer'\nimport loadingReducer from '../loading/reducer'\nimport userReducer from '../user/reducer'\n\nexport const rootReducer = combineReducers({\n    aeds: aedReducer,\n    alert: alertReducer,\n    auth: authReducer,\n    error: errorReducer,\n    loading: loadingReducer,\n    user: userReducer\n})\n","import { applyMiddleware, compose, createStore } from 'redux'\nimport thunk, { ThunkDispatch} from 'redux-thunk'\nimport thunkMiddleware from 'redux-thunk-recursion-detect'\nimport createThunkErrorHandlerMiddleware from 'redux-thunk-error-handler'\n\nimport {rootReducer} from './RootReducer'\nimport { Action } from '../ts/interfaces'\nimport { RootState } from '../ts/types'\nimport { asyncErrorReporter, errorReporter } from '../error/middleware'\n\n//@ts-ignore REDUX DEV TOOLS\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\n\nconst myErrorHandler = (err) => {\n  console.error(err); // write the error to the console\n  // your logic here to determine what should be done on different error types\n  if (err.message === 'auth_failed') {\n    return logoutThunk;\n  }\n}\n\nconst errorHandlerMiddleware = createThunkErrorHandlerMiddleware({ onError: myErrorHandler })\n\nconst middleware = [errorHandlerMiddleware, thunkMiddleware]\n//this is how to get TypeScript to allow dispatch to accept a thunk or an action\ntype DispatchFunctionType = ThunkDispatch<RootState, undefined, Action>\nexport const appStore = createStore(rootReducer, composeEnhancers(applyMiddleware<DispatchFunctionType, Action>(...middleware)))\n//export const appStore = createStore(rootReducer, applyMiddleware<DispatchFunctionType, Action>(...middleware))\nexport const dispatch = appStore.dispatch\n","//uuid needs secure random number generator\nimport 'react-native-get-random-values'\nimport { v4 as uuidv4 } from 'uuid'\nimport { dispatch } from '../redux/ConfigureStore'\nimport { SET_ALERT, REMOVE_ALERT } from '../redux/ActionTypes'\nimport { Action } from '../ts/types'\n\ntype AlertPayload = {\n    type: 'success' | 'error'\n    msg: string\n    id: string\n}\n\ntype IssueAlert = (payload: AlertPayload) => Action\ntype RemoveAlert = (id: string) => Action\n\nexport const issueAlert: IssueAlert = payload => ({\n    type: SET_ALERT,\n    payload,\n})\n\nexport const removeAlert: RemoveAlert = id => ({ type: REMOVE_ALERT, payload: id })\n","//uuid needs secure random number generator\nimport 'react-native-get-random-values'\nimport { v4 as uuidv4 } from 'uuid'\nimport { dispatch } from '../../redux/ConfigureStore'\nimport { SET_ALERT, REMOVE_ALERT } from '../../redux/ActionTypes'\nimport { issueAlert, removeAlert } from '../actionCreators'\n\ntype SetAlert = (msg: string, alertType?: string, timeout?: number) => void\n\nexport const setAlert: SetAlert = (msg, alertType = 'success', timeout = 5000) => {\n    const id = uuidv4()\n    const payload = { msg, type: alertType, id }\n\n    dispatch(issueAlert(payload))\n    setTimeout(() => dispatch(removeAlert(id)), timeout)\n}\n","import { pendingActionType, PendingActionType } from './pendingActionType'\n\nexport const pendingAction= (\n    type: PendingAction,\n    {\n        pending = (x: any = null) => x,\n        success = (x: any = null) => x,\n        failure = (x: any = null) => x,\n    } = {}\n) => ({\n    pending(x: any) {\n        return {\n            type: type.pending,\n            payload: pending(x),\n        }\n    },\n    success(x: any) {\n        return {\n            type: type.success,\n            payload: success(x),\n        }\n    },\n    failure(x: any) {\n        return {\n            type: type.failure,\n            payload: failure(x),\n        }\n    },\n})\n","import { pendingAction} from '../utils/pendingAction'\nimport * as aT from './actionTypes'\n\nexport const changingPassword = pendingAction(aT.CHANGE_PASSWORD)\nexport const confirmingUser = pendingAction(aT.CONFIRM_USER)\nexport const deleteApiToken = () => ({type: aT.DELETE_API_TOKEN})\nexport const deleteAuthToken = () => ({type: aT.DELETE_AUTH_TOKEN})\nexport const forgottingPasswordCode = pendingAction(aT.FORGOT_PASSWORD_CODE)\nexport const forgottingPasswordSet = pendingAction(aT.FORGOT_PASSWORD_SET)\nexport const loggingout = () => ({type: aT.LOG_OUT})\nexport const resettingPassword = pendingAction(aT.RESET_PASSWORD)\nexport const registeringUser = pendingAction(aT.REGISTER_USER)\nexport const setApiToken = () => ({type: aT.SET_API_TOKEN})\nexport const signingIn = pendingAction(aT.SIGN_IN)\nexport const signingUp = pendingAction(aT.SIGN_UP)\n","/* eslint-disable */\n// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-2\",\n    \"aws_cognito_region\": \"us-east-2\",\n    \"aws_user_pools_id\": \"us-east-2_8R9DwsJW8\",\n    \"aws_user_pools_web_client_id\": \"7repdkfpet7ftdifufrd6lg9j5\",\n    \"oauth\": {}\n};\n\n\nexport default awsmobile;\n","import { navigate } from '../../navigation/RootNavigation'\nimport { setAlert } from '../../alert/services/setAlert'\nimport { dispatch } from '../../redux/ConfigureStore'\nimport { changingPassword } from '../actionCreators'\n\nimport * as changePassword from './changePassword'\nimport Amplify, { Auth } from 'aws-amplify'\nimport config from '../../../aws-exports'\n//put this in initamplify function somewhere?\n//call with other app init stuff\nAmplify.configure(config)\n\nexport const request = (oldPassword: string, newPassword: string) => {\n    dispatch(changingPassword.pending())\n    return Auth.currentAuthenticatedUser().then((user) =>\n        Auth.changePassword(user, oldPassword, newPassword)\n    )\n}\n\nexport const success = (data: any) => {\n    dispatch(changingPassword.success(data))\n    setAlert('Your password has been changed.')\n    return Promise.resolve(data)\n}\n\nexport const failure = (err) => {\n    dispatch(changingPassword.failure(err))\n    setAlert(err.message, 'error')\n    return Promise.reject(err)\n}\n\nexport const service = (oldPassword: string, newPassword: string) =>\n    changePassword\n        .request(oldPassword, newPassword)\n        .then(changePassword.success)\n        .catch(changePassword.failure)\n","import Storage from 'react-native-storage'\nimport localStorage from '@react-native-community/async-storage'\n\nconst storage = new Storage({\n  // maximum capacity, default 1000 key-ids\n  size: 1000,\n\n  // Use AsyncStorage for RN apps, or window.localStorage for web apps.\n  // If storageBackend is not set, data will be lost after reload.\n  storageBackend: localStorage, // for web: window.localStorage\n\n  // expire time, default: 1 day (1000 * 3600 * 24 milliseconds).\n  // can be null, which means never expire.\n  defaultExpires: 1000 * 3600 * 24,\n\n  // cache data in the memory. default is true.\n  enableCache: true,\n\n  // if data was not found in storage or expired data was found,\n  // the corresponding sync method will be invoked returning\n  // the latest data.\n  sync: {\n    // we'll talk about the details later.\n  }\n})\n\nexport default storage\n","import storage from '../../localStorage/storage'\n\nexport const storageSave = (key: string, value: string) =>\n    storage.save({\n        key: key, // Note: Do not use underscore(\"_\") in key!\n        data: value,\n\n        // if expires not specified, the defaultExpires will be applied instead.\n        // if set to null, then it will never expire.\n        expires: 1000 * 3600,\n    })\n","import { deletingValue, deletingValueFail, deletingValueSuccess } from '../actionCreators'\nimport { dispatch } from '../../redux/ConfigureStore'\nimport { storageSave } from './storageSave'\n\nexport const deleteValue = (key: string) => {\n    dispatch(deletingValue(key))\n    return storageSave(key, null)\n        .then(() => dispatch(deletingValueSuccess(key)))\n        .catch((err) => {\n            dispatch(deletingValueFail(key))\n            return Promise.reject(err)\n        })\n}\n\n","import { dispatch } from '../redux/ConfigureStore'\nimport {\n    DELETE_LOCAL_DATA,\n    DELETE_LOCAL_DATA_FAIL,\n    DELETE_LOCAL_DATA_SUCCESS,\n    LOAD_LOCAL_DATA,\n    LOAD_LOCAL_DATA_FAIL,\n    LOAD_LOCAL_DATA_SUCCESS,\n    SAVE_LOCAL_DATA,\n    SAVE_LOCAL_DATA_FAIL,\n    SAVE_LOCAL_DATA_SUCCESS,\n} from '../localStorage/actionTypes'\n\n\nexport const savingValue = (key: string) => (value: any) => ({\n    type: SAVE_LOCAL_DATA,\n    payload: { key, value },\n})\nexport const savingValueFail = (key: string) => (value: any) => ({\n    type: SAVE_LOCAL_DATA_FAIL,\n    payload: { key, value },\n})\nexport const savingValueSuccess = (key: string) => (value: any) => ({\n    type: SAVE_LOCAL_DATA_SUCCESS,\n    payload: { key, value },\n})\n\nexport const deletingValue = (key: string) => ({\n    type: DELETE_LOCAL_DATA,\n    payload: key,\n})\nexport const deletingValueFail = (key: string) => ({\n    type: DELETE_LOCAL_DATA_FAIL,\n    payload: key,\n})\nexport const deletingValueSuccess = (key: string) => ({\n    type: DELETE_LOCAL_DATA_SUCCESS,\n    payload: key,\n})\n","export const LOAD_LOCAL_DATA = 'LOAD_LOCAL_DATA'\nexport const LOAD_LOCAL_DATA_FAIL = 'LOAD_LOCAL_DATA_FAIL'\nexport const LOAD_LOCAL_DATA_SUCCESS = 'LOAD_LOCAL_DATA_SUCCESS'\n\nexport const DELETE_LOCAL_DATA = 'DELETE_LOCAL_DATA'\nexport const DELETE_LOCAL_DATA_FAIL = 'DELETE_LOCAL_DATA_FAIL'\nexport const DELETE_LOCAL_DATA_SUCCESS = 'DELETE_LOCAL_DATA_SUCCESS'\n\nexport const SAVE_LOCAL_DATA = 'SAVE_LOCAL_DATA'\nexport const SAVE_LOCAL_DATA_FAIL = 'SAVE_LOCAL_DATA_FAIL'\nexport const SAVE_LOCAL_DATA_SUCCESS = 'SAVE_LOCAL_DATA_SUCCESS'\n","import { GQL_RETRY } from './actionTypes'\n\nexport const gqlRetry = (x: any) => ({ type: GQL_RETRY, payload: x })\n","export const GQL_RETRY = 'GQL_RETRY'\n","import { GraphQLClient } from 'graphql-request'\nimport { API_URL } from '@env'\nimport { deleteApiToken, setApiToken } from '../../auth/actionCreators'\nimport { dispatch } from '../../redux/ConfigureStore'\nimport { gqlRetry} from '../actionCreators'\nimport crossFetch from 'cross-fetch'\n\nexport const fetchRetry = (url: string, fetchOptions = {}, delay = 500, limit = 3) => {\n    const later = (delay: number) =>\n        new Promise((resolve) => setTimeout(resolve, delay))\n    //stagger retries, map [0, 1] to [.8, 1.2]\n    const jitter = () => Math.floor((Math.random() * 0.4 + 0.8) * 100) / 100\n    const recur = (\n        timesTried: number,\n        delay: number,\n        err?: any\n    ): Promise<any> => {\n        if (timesTried <= limit) {\n            return crossFetch(url, fetchOptions).catch((err) => {\n                if (err.message === 'Network request failed') {\n                    dispatch(gqlRetry())\n                    return later(delay * jitter()).then(() =>\n                        recur(timesTried + 1, delay * 2, err)\n                    )\n                } else {\n                    return Promise.reject(err)\n                }\n            })\n        } else {\n            return Promise.reject(err)\n        }\n    }\n    return recur(0, delay)\n}\n\nconst gqlClient = new GraphQLClient(API_URL + '/graphql', {\n    headers: { authorization: null },\n    fetch: fetchRetry,\n})\n\ngqlClient.setAuthToken = (token: string) => {\n    dispatch(setApiToken())\n    gqlClient.setHeader('authorization', token)\n    return token\n}\ngqlClient.deleteAuthToken = () => {\n    dispatch(deleteApiToken())\n    gqlClient.setHeader('authorization', null)\n}\n\n//centralize logging and error handling\ngqlClient.makeRequest = (query, variables) =>\n    //this comment allowed me to get around some caching issue\n    gqlClient.request(query, variables).catch((err) => {\n        console.error('GQL Error!!', err)\n        return Promise.reject(err)\n    })\n\nexport { gqlClient }\n","import { deleteAuthToken } from '../actionCreators'\nimport { deleteValue } from '../../localStorage/services/deleteValue'\nimport { gqlClient } from '../../gql/services'\nimport { dispatch } from '../../redux/ConfigureStore'\n\nexport const clearAuthData = async () => {\n    gqlClient.deleteAuthToken()\n    dispatch(deleteAuthToken())\n    return deleteValue('authData')\n}\n","import { navigate } from '../../navigation/RootNavigation'\nimport { setAlert } from '../../alert/services/setAlert'\nimport { dispatch } from '../../redux/ConfigureStore'\nimport { registerUser } from './'\nimport { UserInfo } from '../../user/types'\nimport { confirmingUser } from '../actionCreators'\n\nimport * as confirmUser from './confirmUser'\nimport Amplify, { Auth } from 'aws-amplify'\nimport config from '../../../aws-exports'\n//put this in initamplify function somewhere?\n//call with other app init stuff\nAmplify.configure(config)\n\nexport const request = (userInfo: UserInfo, authCode: string) => {\n    dispatch(confirmingUser.pending({ userInfo, authCode }))\n    return Auth.confirmSignUp(userInfo.email, authCode)\n}\n\nexport const success = (userInfo: UserInfo) =>\n    //how should errors be handled here?\n    registerUser.service(userInfo)\n        .then((userInfo) => {\n            dispatch(confirmingUser.success(userInfo))\n            setAlert(\n                'Your email address has been confirmed! You can sign in now.',\n                'success'\n            )\n            return Promise.resolve(userInfo)\n        })\n        .catch((err) => {\n            console.log('Register user failed. Now what?')\n            throw err\n        })\nexport const failure = (userInfo: UserInfo, authCode: string) => (err) => {\n    dispatch(confirmingUser.failure({ userInfo, authCode }))\n    setAlert(err.message, 'error')\n    return Promise.reject(err)\n}\n\nexport const service = (userInfo: UserInfo, authCode: string) =>\n    confirmUser\n        .request(userInfo, authCode)\n        .then(confirmUser.success)\n        .catch(confirmUser.failure(userInfo, authCode))\n","import { navigate } from '../../navigation/RootNavigation'\nimport { setAlert } from '../../alert/services/setAlert'\nimport { dispatch } from '../../redux/ConfigureStore'\nimport { forgottingPasswordCode } from '../actionCreators'\n\nimport * as forgotPasswordCode from './forgotPasswordCode'\nimport Amplify, { Auth } from 'aws-amplify'\nimport config from '../../../aws-exports'\n//put this in initamplify function somewhere?\n//call with other app init stuff\nAmplify.configure(config)\n\nexport const request = (email: string) => {\n    console.log(email)\n    dispatch(forgottingPasswordCode.pending(email))\n    return Auth.forgotPassword(email)\n}\n\nexport const success = (data: any) => {\n    dispatch(forgottingPasswordCode.success(data))\n    setAlert('You should receive a code momentarily.')\n    return Promise.resolve(data)\n}\n\nexport const failure = (err) => {\n    dispatch(forgottingPasswordCode.failure(err))\n    setAlert(err.message, 'error')\n    return Promise.reject(err)\n}\n\nexport const service = (userName: string) =>\n    forgotPasswordCode\n        .request(userName)\n        .then(forgotPasswordCode.success)\n        .catch(forgotPasswordCode.failure)\n","import { navigate } from '../../navigation/RootNavigation'\nimport { setAlert } from '../../alert/services/setAlert'\nimport { dispatch } from '../../redux/ConfigureStore'\nimport { forgottingPasswordSet } from '../actionCreators'\n\nimport * as forgotPasswordSet from './forgotPasswordSet'\nimport Amplify, { Auth } from 'aws-amplify'\nimport config from '../../../aws-exports'\n//put this in initamplify function somewhere?\n//call with other app init stuff\nAmplify.configure(config)\n\nexport const request = (\n    email: string,\n    code: string,\n    newPassword: string\n) => {\n    dispatch(forgottingPasswordSet.pending(email))\n    return Auth.forgotPasswordSubmit(email, code, newPassword)\n}\n\nexport const success = (data: any) => {\n    dispatch(forgottingPasswordSet.success(data))\n    setAlert('Your password has been set.')\n    return Promise.resolve(data)\n}\n\nexport const failure = (err) => {\n    dispatch(forgottingPasswordSet.failure(err))\n    setAlert(err.message, 'error')\n    return Promise.reject(err)\n}\n\nexport const service = (email: string, code: string, newPassword: string) =>\n    forgotPasswordSet\n        .request(email, code, newPassword)\n        .then(forgotPasswordSet.success)\n        .catch(forgotPasswordSet.failure)\n","import { Auth } from 'aws-amplify'\n\nexport const extractToken = async () => {\n    const {\n        accessToken: { jwtToken: token },\n    } = await Auth.currentSession()\n    return token\n}\n","import { saveToken, setAuthToken } from './index'\nimport { gqlClient} from '../../gql/services'\n\nexport const handleAuthData = (email: string) => (token: string) =>\n    Promise.resolve(token)\n        .then(gqlClient.setAuthToken)\n        .then(setAuthToken)\n        .then(saveToken(email))\n        .catch((err) => Promise.reject(err))\n","import { clearAuthData } from '../services'\nimport { dispatch } from '../../redux/ConfigureStore'\nimport { loggingout } from '../actionCreators'\n\nexport const logout = () => {\n    dispatch(loggingout())\n    //what do we do if this fails??\n    return clearAuthData()\n}\n","import * as aT from './actionTypes'\nimport { UserInfo } from './types'\nimport { pendingAction } from '../utils/pendingAction'\n\nexport const gettingUser = pendingAction(aT.GET_USER)\nexport const updateUserState = (userInfo: UserInfo) => ({\n    type: aT.UPDATE_USER_STATE,\n    payload: userInfo,\n})\nexport const updatingUser = pendingAction(aT.UPDATE_USER)\n","export const userFields = `\n        firstName,\n        lastName,\n        email,\n        phoneNumber,\n        id\n`\nexport const userRecord = `\n    record {\n        ${userFields}\n    }\n`\n","import { gql } from 'graphql-request'\nimport { userRecord } from './variables'\n\nexport const createUserQuery = gql`\n    mutation ($record: CreateOneUserInput!) {\n  userCreateOne (record: $record)  {\n       ${userRecord}\n  }\n}`\n","import { gqlClient } from '../../gql/services'\nimport { axiosError } from '../../error/actionCreators'\nimport { dispatch } from '../../redux/ConfigureStore'\nimport { updateUserState } from '../../user/actionCreators'\nimport { createUserQuery } from '../../user/queries/createUserQuery'\nimport { registeringUser } from '../actionCreators'\nimport { setAlert } from '../../alert/services'\nimport { UserInfo } from '../../user/types'\nimport * as registerUser from './registerUser'\n\nexport const request = (userInfo: UserInfo) => {\n    dispatch(registeringUser.pending(userInfo))\n    return gqlClient.makeRequest(createUserQuery, { record: userInfo})\n}\n\nexport const success = (res) => {\n    const userInfo = res.userCreateOne.record\n    dispatch(registeringUser.success(userInfo))\n    dispatch(updateUserState(userInfo))\n    return Promise.resolve(userInfo)\n}\n\nexport const failure = (userInfo: UserInfo) => (err) => {\n    dispatch(registeringUser.failure(userInfo))\n    setAlert(err.message, 'error')\n    return Promise.reject(err)\n}\n\nexport const service = (userInfo: UserInfo) =>\n    registerUser\n        .request(userInfo)\n        .then(registerUser.success)\n        .catch(registerUser.failure(userInfo))\n","import { dispatch } from '../../redux/ConfigureStore'\nimport { SET_AUTH_TOKEN } from '../../redux/ActionTypes'\n\nexport const setAuthToken = (token: string) => {\n    dispatch({ type: SET_AUTH_TOKEN, payload: token })\n    return token\n}\n","import { dispatch } from '../../redux/ConfigureStore'\nimport {\n    savingValue,\n    savingValueFail,\n    savingValueSuccess,\n} from '../actionCreators'\n//we don't want this exported from index\nimport { storageSave } from './storageSave'\n\nexport const saveValue = (key: string) => (value: any) => {\n    dispatch(savingValue(key)(value))\n    return storageSave(key, value)\n        .then(() => dispatch(savingValueSuccess(key)(value)))\n        .catch((err) => {\n            dispatch(savingValueFail(key)(value))\n            throw err\n        })\n}\n","import { saveValue } from '../../localStorage/services/saveValue'\n\nexport const saveToken = (email: string) => async (token: string) => {\n    await saveValue('authData')({ email, token })\n    return token\n}\n","import { setAlert } from '../../alert/services/setAlert'\nimport { dispatch } from '../../redux/ConfigureStore'\nimport { signingUp } from '../actionCreators'\nimport { updateUserState } from '../../user/actionCreators'\n\nimport * as signUp from './signUp'\nimport Amplify, { Auth } from 'aws-amplify'\nimport config from '../../../aws-exports'\n//put this in initamplify function somewhere?\n//call with other app init stuff\nAmplify.configure(config)\n\nexport const request = (email: string, password: string) => {\n    dispatch(signingUp.pending(email))\n    return Auth.signUp({\n        username: email,\n        password: password,\n    })\n}\n\nexport const success = (email: string) => () => {\n    dispatch(signingUp.success(email))\n    dispatch(updateUserState({ email }))\n    setAlert(\n        'Sign up successful! You should receive an email with an authentication code shortly.'\n    )\n    return email\n}\nexport const failure = (email: string) => (err) => {\n    dispatch(signingUp.failure({ email, err }))\n    setAlert(err.message, 'error')\n    return Promise.reject(err)\n}\n\nexport const service = (email: string, password: string) =>\n    signUp\n        .request(email, password)\n        .then(signUp.success(email))\n        .catch(signUp.failure(email))\n","import { gql } from 'graphql-request'\nimport { userFields } from './variables'\n\nexport const getUserQuery = gql`query ($email: String!) {\n  userOne (filter:{email: $email})  {\n      ${userFields}\n  }\n}`\n","import { gqlClient } from '../../gql/services'\nimport { dispatch } from '../../redux/ConfigureStore'\nimport { logError } from '../../error/actionCreators'\nimport { gettingUser, updateUserState } from '../actionCreators'\nimport { getUserQuery } from '../queries/getUserQuery'\nimport { setAlert } from '../../alert/services/setAlert'\nimport { API_URL } from '@env'\nimport { GqlRequestError } from '../../error/types'\n\nimport * as getUser from './getUser'\n\nexport const request = (email: string) => {\n    dispatch(gettingUser.pending(email))\n    return gqlClient.makeRequest(getUserQuery, { email })\n}\n\nexport const success = (res: any) => {\n    const userInfo = res.userOne\n    dispatch(gettingUser.success(userInfo))\n    dispatch(updateUserState(userInfo))\n    return Promise.resolve(userInfo)\n}\n\nexport const failure = (email: string) => (err: GqlRequestError) => {\n    console.log(err)\n    dispatch(gettingUser.failure(email))\n    if (err?.response?.status === 404) {\n        setAlert(\n            'There was a problem getting your data. You are being logged out.',\n            'error'\n        )\n    }\n    return Promise.reject(err)\n}\n\nexport const service = (email: string) =>\n    getUser.request(email).then(getUser.success).catch(getUser.failure(email))\n","import { gql } from 'graphql-request'\nimport { userRecord } from './variables'\n\nexport const updateUserQuery = gql`mutation ($userId: MongoID!, $userInfo: UpdateByIdUserInput!) {\n   userUpdateById(_id: $userId, record: $userInfo)  {\n       ${userRecord}\n  }\n}`\n","import { UserInfo } from '../types'\nimport { updateUserState, updatingUser } from '../actionCreators'\nimport { dispatch } from '../../redux/ConfigureStore'\nimport { gqlClient } from '../../gql/services'\nimport { updateUserQuery } from '../queries/updateUserQuery'\n\nimport * as updateUser from './updateUser'\n\nexport const request = (userInfo: UserInfo) => {\n    const userId = userInfo.id\n    delete userInfo.id\n    dispatch(updatingUser.pending(userInfo))\n    return gqlClient.makeRequest(updateUserQuery, { userId, userInfo })\n}\n\nexport const success = (res: any) => {\n    const userInfo = res.userUpdateById.record\n    dispatch(updatingUser.success(userInfo))\n    dispatch(updateUserState(userInfo))\n    return Promise.resolve(userInfo)\n}\n\nexport const failure = (userInfo: UserInfo) => (err) => {\n    dispatch(updatingUser.failure(userInfo))\n    return Promise.reject(err)\n}\n\nexport const service = (userInfo: UserInfo) =>\n    updateUser\n        .request(userInfo)\n        .then(updateUser.success)\n        .catch(updateUser.failure(userInfo))\n","import * as aT from './actionTypes'\nimport { pendingAction } from '../utils/pendingAction'\n\nexport const addingAed = pendingAction(aT.ADD_AED)\nexport const gettingAeds = pendingAction(aT.GETTING_AEDS)\nexport const updatingAed = pendingAction(aT.UPDATE_AED)\nexport const removingAed = pendingAction(aT.REMOVE_AED)\nexport const reportingUse = pendingAction(aT.REPORT_USE)\n","export const aedFields = \n`id,\nlastInspected,\nlocation,\nmake,\nmodel,\npads {\n    expire\n},\nbattery {\n    expire\n},\nserialNumber,\nuserId`\nexport const aedRecord = \n`record {\n    ${aedFields}\n}`\n","import { gql } from 'graphql-request'\nimport { aedRecord } from './variables'\n\nexport const addAedQuery = gql\n`mutation($record: CreateOneAedInput!) {\n    aedCreateOne(record: $record) {\n        ${aedRecord}\n    }\n}`\n","import { gql } from 'graphql-request'\nimport { aedFields } from './variables'\n\nexport const getAedsQuery = gql`query ($filter: FilterFindManyAedInput) {\n  aedMany (filter: $filter)  {\n      ${aedFields}\n  }\n}`\n","import { gql } from 'graphql-request'\n\nexport const removeAedQuery = gql`mutation ($id: MongoID!) {\n  aedRemoveById (_id: $id)  {\n    record {\n      id,\n      make,\n      model,\n    }\n  }\n}`\n","import { gql } from 'graphql-request'\nimport { aedRecord } from './variables'\n\nexport const updateAedQuery = gql`\n    mutation($id: MongoID!, $record: UpdateByIdAedInput!) {\n        aedUpdateById(_id: $id, record: $record) {\n            ${aedRecord}\n        }\n    }\n`\n","import { UserInfo } from '../../user/types'\nimport { AddAedInput, AddAedResponse } from '../types'\nimport { addingAed } from '../actionCreators'\nimport { dispatch } from '../../redux/ConfigureStore'\nimport { gqlClient } from '../../gql/services'\nimport { addAedQuery } from '../queries'\nimport { GqlRequestError } from '../../error/types'\n\nimport * as addAed from './addAed'\n\n//using userInfo here instead of just id because in the future maybe facility or organization user\nexport const request = (userInfo: UserInfo) => (aedInfo: AddAedInput) => {\n    dispatch(addingAed.pending(aedInfo))\n    return gqlClient.makeRequest(addAedQuery, {\n        record: { ...aedInfo, userId: userInfo.id, lastInspected: Date() },\n    })\n}\n\nexport const success = (res: AddAedResponse) => {\n    const aedInfo = res.aedCreateOne.record\n    dispatch(addingAed.success(aedInfo))\n    return Promise.resolve(aedInfo)\n}\n\nexport const failure = (aedInfo: AddAedInput) => (err: GqlRequestError) => {\n    dispatch(addingAed.failure(aedInfo))\n    return Promise.reject(err)\n}\n\nexport const service = (userInfo: UserInfo) => (aedInfo: AddAedInput) =>\n    addAed\n        .request(userInfo)(aedInfo)\n        .then(addAed.success)\n        .catch(addAed.failure(aedInfo))\n","import { UserInfo } from '../../user/types'\nimport { AedInfo } from '../types'\nimport { gettingAeds } from '../actionCreators'\nimport { getAedsQuery } from '../queries'\nimport { dispatch } from '../../redux/ConfigureStore'\nimport { navigate } from '../../navigation/RootNavigation'\nimport { gqlClient } from '../../gql/services'\nimport * as getAeds from './getAeds'\n\nexport const request = (userId: string) => {\n    dispatch(gettingAeds.pending(userId))\n    return gqlClient.makeRequest(getAedsQuery, { filter: { userId } })\n}\n\nexport const success = (res) => {\n    const aeds = res.aedMany\n    dispatch(gettingAeds.success(aeds))\n    return Promise.resolve(aeds)\n}\n\nexport const failure = (userId: string) => (err) => {\n    dispatch(gettingAeds.failure(userId))\n    return Promise.reject(err)\n}\n\nexport const service = (userId: string) =>\n    getAeds\n        .request(userId)\n        .then(getAeds.success)\n        .catch(getAeds.failure(userId))\n","import { removingAed } from '../actionCreators'\nimport { dispatch } from '../../redux/ConfigureStore'\nimport { gqlClient } from '../../gql/services'\nimport { removeAedQuery } from '../queries'\nimport { AedInfo } from '../types'\nimport * as removeAed from './removeAed'\n\nexport const request = (aedId: string) => {\n    dispatch(removingAed.pending(aedId))\n    return gqlClient\n        .makeRequest(removeAedQuery, { id: aedId })\n}\n\nexport const success = (res) => {\n    const aedInfo = res.aedRemoveById.record\n    dispatch(removingAed.success(aedInfo))\n    //navigate('AedScreen')\n    return Promise.resolve(aedInfo)\n}\n\nexport const failure = (aedId: string) => (err) => {\n    dispatch(removingAed.failure(aedId))\n    return Promise.reject(err)\n}\n\n\nexport const service = (aedId: string) => \nremoveAed.request(aedId).then(removeAed.success).catch(removeAed.failure(aedId))\n","import { reportingUse } from '../actionCreators'\nimport { dispatch } from '../../redux/ConfigureStore'\nimport { navigate } from '../../navigation/RootNavigation'\nimport { gqlClient } from '../../gql/services'\n//import { reportUseQuery } from '../queries'\nimport { UseReport } from '../types'\nimport * as reportUse from './reportUse'\n\nexport const request = (useReport: UseReport) => {\n    dispatch(reportingUse.pending(useReport))\n    //return gqlClient.makeRequest(reportUseQuery, { id, record: useReport })\n    console.log('Remembert this is not hitting the server yet!', useReport)\n    return Promise.resolve({ useReport })\n}\n\nexport const success = (res) => {\n    const useReport = res.useReport\n    dispatch(reportingUse.success(useReport))\n    return Promise.resolve(useReport)\n}\n\nexport const failure = (useReport: UseReport) => (err) => {\n    dispatch(reportingUse.failure(useReport))\n    return Promise.reject(err)\n}\n\nexport const service = (useReport: UseReport) =>\n    reportUse\n        .request(useReport)\n        .then(reportUse.success)\n        .catch(reportUse.failure(useReport))\n","import { updatingAed } from '../actionCreators'\nimport { dispatch } from '../../redux/ConfigureStore'\nimport { navigate } from '../../navigation/RootNavigation'\nimport { gqlClient } from '../../gql/services'\nimport { updateAedQuery } from '../queries'\nimport { AedInfo } from '../types'\nimport * as updateAed from './updateAed'\n\nexport const request = (aedInfo: AedInfo) => {\n    dispatch(updatingAed.pending(aedInfo))\n    const id = aedInfo.id\n    delete aedInfo.id\n    return gqlClient\n        .makeRequest(updateAedQuery, { id, record: aedInfo })\n}\n\nexport const success = (res) => {\n    const aedInfo = res.aedUpdateById.record\n    dispatch(updatingAed.success(aedInfo))\n    //navigate('AedScreen')\n    return Promise.resolve(aedInfo)\n}\n\nexport const failure = (aedInfo: AedInfo) => (err) => {\n    dispatch(updatingAed.failure(aedInfo))\n    return Promise.reject(err)\n}\n\nexport const service = (aedInfo: AedInfo) =>\n    updateAed\n        .request(aedInfo)\n        .then(updateAed.success)\n        .catch(updateAed.failure(aedInfo))\n","import { clearAuthData, extractToken, handleAuthData } from './'\nimport { dispatch } from '../../redux/ConfigureStore'\nimport { getUser } from '../../user/services'\nimport { getAeds } from '../../aed/services'\nimport { setAlert } from '../..//alert/services/setAlert'\nimport { signingIn } from '../actionCreators'\n\nimport * as signIn from './signIn'\nimport Amplify, { Auth } from 'aws-amplify'\nimport config from '../../../aws-exports'\n//put this in initamplify function somewhere?\n//call with other app init stuff\nAmplify.configure(config)\n\nexport const request = (email: string, password: string) => {\n    dispatch(signingIn.pending(email))\n    return Auth.signIn(email, password).then(extractToken)\n}\n\nexport const success = (email: string) => async (token: string) => {\n    try {\n        dispatch(signingIn.success({ email, token }))\n        await handleAuthData(email)(token)\n        const user = await getUser.service(email)\n        await getAeds.service(user.id)\n        return Promise.resolve(token)\n    } catch (err) {\n        return Promise.reject(err)\n    }\n}\n\nexport const failure = (email: string) => async (err) => {\n    try {\n        dispatch(signingIn.failure({ email, err }))\n        setAlert('An error has occured. You have been signed out.', 'error')\n        await clearAuthData()\n    } catch (error) {\n        return Promise.reject(error)\n    } finally {\n        return Promise.reject(err)\n    }\n}\n\nexport const service = (email: string, password: string) =>\n    signIn\n        .request(email, password)\n        .then(signIn.success(email))\n        .catch(signIn.failure(email))\n","import * as signIn from './signIn'\nimport { loadValue } from '../../localStorage/services'\n\nexport const loadAuthToken = async () => {\n    const authData = await loadValue('authData')\n\n    if (authData?.email && authData?.token) {\n        signIn.success(authData.email)(authData.token)\n    } else {\n        console.log('Could not load authData.')\n    }\n}\n","import storage from '../../localStorage/storage'\n\nexport const loadValue = (key: string) =>\n    storage\n        .load({\n            key: key,\n        })\n        .then((data) => {\n            return data\n        })\n        .catch((err) => {\n            return Promise.reject(err)\n        })\n","// RootNavigation.js\n//this helps us navigate from thunk\n//https://reactnavigation.org/docs/navigating-without-navigation-prop/\n\nimport * as React from 'react';\n\nexport const navigationRef = React.createRef();\n\nexport function navigate(name: string, params = {}) {\n  navigationRef.current.navigate(name, params);\n}\n\n// add other navigation functions that you need and export them\n","import { StackScreenProps } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nimport { RootStackParamList } from '../types';\n\nexport default function NotFoundScreen({\n  navigation,\n}: StackScreenProps<RootStackParamList, 'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","import { Platform } from 'react-native'\n\nexport const isMobile = Platform.OS !== 'web'\n","import { Dimensions, StyleSheet, TextStyle, ViewStyle } from 'react-native'\nimport {\n    widthPercentageToDP as wp,\n    heightPercentageToDP as hp,\n} from 'react-native-responsive-screen'\nimport { isMobile } from '../utils'\n\nconst width = Dimensions.get('window').width\nconst height = Dimensions.get('window').height\n\nexport const styles = StyleSheet.create({\n    screenTemplate: {\n        width: '100%',\n        height: '100%',\n        justifyContent: 'flex-end',\n        alignItems: 'center',\n        backgroundColor: '#e6f7ff',\n    },\n    contentArea: {\n        height: isMobile ? hp('100%') : '100%',\n        flex: 1,\n        alignItems: 'center',\n        width: isMobile ? wp('100%') : 400,\n        justifyContent: 'center',\n        backgroundColor: '#e6f7ff',\n    },\n    cardSections: {\n        flexDirection: 'column',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n        flex: 1,\n    },\n    cardSection: {\n        flexDirection: 'column',\n        marginBottom: 20,\n        justifyContent: 'flex-start',\n        width: isMobile ? '100%' : 800,\n    },\n    cardList: {\n        flexWrap: 'wrap',\n        flexDirection: 'row',\n        backgroundColor: 'white',\n        alignItems: 'flex-start',\n        width: isMobile ? '100%' : 800,\n    },\n    card: {\n        backgroundColor: 'white',\n        flexDirection: 'column',\n        justifyContent: 'flex-start',\n        width: '100%',\n    },\n    aedImage: {\n        width: isMobile ? wp('50%') : 200,\n        height: isMobile ? wp('50%') : 200,\n    },\n    input: {\n        padding: 15,\n        backgroundColor: '#ededed',\n        width: isMobile ? wp('100%') : 400,\n    },\n    container: {\n        width: isMobile ? wp('100%') : 400,\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: '#e6f7ff',\n    },\n    button: {\n        marginTop: 10,\n    },\n    title: {\n        fontSize: 20,\n        fontWeight: 'bold',\n    },\n    separator: {\n        marginVertical: 30,\n        height: 1,\n        width: '80%',\n    },\n    head: { height: 40, backgroundColor: '#f1f8ff' },\n    text: { margin: 6 },\n    loading: {\n        position: 'absolute',\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    formError: {\n        marginBottom: 20,\n    },\n})\n\ninterface Alerts {\n    alertContainer: ViewStyle\n    error: TextStyle\n    success: TextStyle\n}\n\nexport const alertStyles = StyleSheet.create<Alerts>({\n    alertContainer: {\n        marginTop: 63,\n        position: 'absolute',\n        width: width,\n        zIndex: 999,\n    },\n    error: {\n        backgroundColor: 'red',\n        fontSize: 20,\n    },\n    success: {\n        backgroundColor: 'green',\n        fontSize: 20,\n    },\n})\n","import React, { useRef } from 'react'\nimport { Button, View } from 'react-native'\nimport { styles } from '../styles/styles'\n\ntype Options = { onPress: Function; title: string }\n\nexport const StyledButton = ({onPress, title}: Options) => (\n    <View style={styles.button}>\n        <Button\n            title={title}\n            onPress={onPress}\n        />\n    </View>\n)\n","import React from 'react'\nimport { Text, View } from 'react-native'\nimport { TextInput } from 'react-native-paper'\nimport { styles } from '../styles/styles'\n\nexport const StyledTextInput = (props) =>\n        <TextInput\n            label={props.label || props.placeholder}\n            defaultValue={props.defaultValue}\n            editable={props.editable}\n            multiline={props.multiline}\n            textAlignVertical={props.textAlignVertical}\n            numberOfLines={props.numberOfLines}\n            secureTextEntry={props.secureTextEntry}\n            onChangeText={props.onChangeText}\n            style={styles.input}\n            mode='outlined'\n            autoCapitalize={props.autoCapitalize}\n            autoComplete={props.autoComplete}\n            value={props.value}\n        />\n","import React from 'react'\nimport { View } from 'react-native'\nimport { styles } from '../styles/styles'\n\nexport const ContentArea = (props) => (\n    <View style={styles.contentArea}>{props.children}</View>\n)\n","import React from 'react'\nimport { ContentArea } from './ContentArea'\nimport { View } from 'react-native'\nimport { styles } from '../styles/styles'\n\nexport const ScreenTemplate = (props) => (\n    <View style={styles.screenTemplate}>\n        <ContentArea>{props.children}</ContentArea>\n    </View>\n)\n","import React from 'react'\nimport { StyleProp, Text, View } from 'react-native'\nimport PropTypes, { InferProps } from 'prop-types'\n\n//this will be done with a proper type, but this is the syntax for this approach\nconst FormError = ({isError, message, style}: {isError: bool, message: string, style: StyleProp}) => {\n    return <Text style={style}>{isError ? message : ' '}</Text>\n}\n\nexport default FormError\n","import { AppDispatch } from '../../ts/types'\nimport { doneLoading } from '../actionCreators'\nimport { LOADING } from '../../redux/ActionTypes'\nimport { dispatch } from '../../redux/ConfigureStore'\n\nexport const loading = (promise: Promise<{}>) => {\n    dispatch({\n        type: LOADING,\n    })\n   promise.finally(() => dispatch(doneLoading()))\n}\n","import { AppDispatch } from '../ts/types'\nimport { DONE_LOADING, LOADING } from '../redux/ActionTypes'\n\nexport const loading = (dispatch: AppDispatch) => ({\n    type: LOADING\n})\n\nexport const doneLoading = (dispatch: AppDispatch) => ({\n    type: DONE_LOADING\n})\n","import React, { useRef } from 'react'\nimport { connect } from 'react-redux'\nimport { KeyboardAvoidingView, Platform } from 'react-native'\nimport { useForm, Controller } from 'react-hook-form'\nimport PropTypes, { InferProps } from 'prop-types'\nimport { StackNavigationProp } from '@react-navigation/stack'\n\nimport { styles } from '../styles/styles'\n\nimport { StyledButton } from '../components/StyledButton'\nimport { StyledTextInput } from '../components/StyledTextInput'\nimport { ScreenTemplate } from '../screens/ScreenTemplate'\nimport { AppDispatch, RootState } from '../ts/types'\nimport { forgotPasswordCode, signIn } from '../auth/services'\nimport { linkTo } from '../navigation/services'\nimport FormError from '../components/FormError'\nimport { loading } from '../loading/services'\n\nconst mapStateToProps = (state: RootState) => {\n    return {}\n}\n\nconst propTypes = {\n    navigation: StackNavigationProp,\n    signInThunk: PropTypes.func.isRequired,\n}\n\ntype Props = InferProps<typeof propTypes>\n\nconst SignInScreen: React.FC<Props> = ({ navigation }) => {\n    const { control, getValues, handleSubmit, errors, setValue } = useForm()\n    const onChangeField = (name: string) => (text: string) =>\n        setValue(name, text.trim())\n    const onSubmit = (data, e) =>\n        loading(signIn.service(data.email.toLowerCase(), data.password))\n\n    return (\n        <KeyboardAvoidingView\n            behavior={Platform.select({ ios: 'padding' })}\n            style={{ flex: 1 }}\n        >\n            <ScreenTemplate>\n                <Controller\n                    control={control}\n                    render={({ onChange, onBlur, value }) => (\n                        <StyledTextInput\n                            placeholder=\"Email\"\n                            onChangeText={onChangeField('email')}\n                            autoCapitalize=\"none\"\n                            autoComplete=\"email\"\n                        />\n                    )}\n                    name=\"email\"\n                    rules={{\n                        required: true,\n                        validate: {\n                            required: (value) => value.trim().length > 0,\n                            valid: (value) =>\n                                /^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/.test(value),\n                        },\n                    }}\n                    defaultValue=\"\"\n                />\n                <FormError\n                    isError={errors.email}\n                    message={\n                        (errors.email?.type === 'required' &&\n                            'This is required') ||\n                        (errors.email?.type === 'valid' &&\n                            'Must be a valid email address')\n                    }\n                    style={styles.formError}\n                />\n\n                <Controller\n                    control={control}\n                    render={({ onChange, onBlur, value }) => (\n                        <StyledTextInput\n                            placeholder=\"Password\"\n                            secureTextEntry={true}\n                            onChangeText={onChangeField('password')}\n                            autoCapitalize=\"none\"\n                        />\n                    )}\n                    name=\"password\"\n                    rules={{\n                        required: true,\n                        validate: {\n                            required: (value) => value.trim().length > 0,\n                            minLength: (value) => value.trim().length >= 8,\n                        },\n                    }}\n                    defaultValue=\"\"\n                />\n                <FormError\n                    isError={errors.password}\n                    message={\n                        (errors.password?.type === 'required' &&\n                            'This is required') ||\n                        (errors.password?.type === 'minLength' &&\n                            'Password must be at least 8 characters')\n                    }\n                    style={styles.formError}\n                />\n\n                <StyledButton\n                    title=\"Sign In\"\n                    onPress={handleSubmit(onSubmit)}\n                />\n\n                <StyledButton\n                    title=\"Don't have an account? Sign up here.\"\n                    onPress={() => navigation.navigate('sign-up')}\n                />\n\n                <StyledButton\n                    title=\"Forgot your password?\"\n                    onPress={() => navigation.navigate('ForgotPasswordCode')}\n                />\n            </ScreenTemplate>\n        </KeyboardAvoidingView>\n    )\n}\n\nexport default connect(mapStateToProps)(SignInScreen)\n","import React, { useRef } from 'react'\nimport { connect } from 'react-redux'\nimport {\n    StyleSheet,\n    View,\n} from 'react-native'\nimport { useForm, Controller } from 'react-hook-form'\nimport PropTypes, { InferProps } from 'prop-types'\nimport { StackNavigationProp } from '@react-navigation/stack'\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view'\n\nimport { styles } from '../styles/styles'\n\nimport {\n    widthPercentageToDP as wp,\n    heightPercentageToDP as hp,\n} from 'react-native-responsive-screen'\nimport { ScreenTemplate } from '../screens/ScreenTemplate'\nimport { AppDispatch, RootState } from '../ts/types'\nimport { confirmUser } from '../auth/services'\nimport { loading } from '../loading/services'\nimport FormError from '../components/FormError'\nimport { UserInfo } from '../user/types'\nimport {isMobile} from '../utils'\nimport {StyledButton} from '../components/StyledButton'\nimport {StyledTextInput} from '../components/StyledTextInput'\n\nconst mapStateToProps = (state: RootState) => ({})\n\nconst propTypes = {\n    confirmUserThunk: PropTypes.func.isRequired,\n    navigation: PropTypes.shape({\n        navigate: PropTypes.func.isRequired,\n    }).isRequired,\n}\n\ntype Props = InferProps<typeof propTypes>\n\nconst ConfirmSignUpScreen: React.FC<Props> = ({ navigation, route }) => {\n    const formValues = route.params.form || {}\n    const justSignedUp = route.params.justSignedUp\n    const {\n        control,\n        getValues,\n        handleSubmit,\n        errors,\n        register,\n        setValue,\n    } = useForm()\n    const onChangeField = (name: string) => (text: string) =>\n        setValue(name, text.trim())\n    const onSubmit = (data) => {\n        const authCode = data.code\n        delete data.code\n        loading(\n            confirmUser.service(data, authCode).then(() => navigate('sign-in'))\n        )\n    }\n\n    if (justSignedUp) {\n        for (const key in formValues) {\n            if (key !== 'password' && key !== 'confirmPassword') {\n                register(key)\n                setValue(key, formValues[key])\n            }\n        }\n    }\n\n    return (\n        <ScreenTemplate>\n            <KeyboardAwareScrollView\n                resetScrollToCoords={{ x: 0, y: 0 }}\n                contentContainerStyle={{\n                    flexGrow: 1,\n                    flexDirection: 'column',\n                    height: isMobile ? hp('100%') : 400,\n                    width: isMobile ? wp('100%') : 400,\n                    justifyContent: 'center',\n                }}\n                scrollEnabled={true}\n            >\n                {justSignedUp ? (\n                    <View></View>\n                ) : (\n                    <View>\n                        <Controller\n                            control={control}\n                            render={({ onChange, onBlur, value }) => (\n                                <StyledTextInput\n                                    placeholder=\"First Name\"\n                                    onChangeText={onChangeField('firstName')}\n                                    defaultValue={formValues.firstName || ''}\n                                    autoCapitalize=\"words\"\n                                />\n                            )}\n                            defaultValue={formValues.firstName || ''}\n                            name=\"firstName\"\n                            rules={{ required: true }}\n                        />\n                        <FormError\n                            isError={errors.firstName}\n                            message={'This is required'}\n                            style={styles.formError}\n                        />\n\n                        <Controller\n                            control={control}\n                            render={({ onChange, onBlur, value }) => (\n                                <StyledTextInput\n                                    placeholder=\"Last Name\"\n                                    onChangeText={onChangeField('lastName')}\n                                    defaultValue={formValues.lastname || ''}\n                                    autoCapitalize=\"words\"\n                                />\n                            )}\n                            defaultValue={formValues.lastname || ''}\n                            name=\"lastName\"\n                            rules={{ required: true }}\n                        />\n                        <FormError\n                            isError={errors.lastName}\n                            message={'This is required'}\n                            style={styles.formError}\n                        />\n\n                        <Controller\n                            control={control}\n                            render={({ onChange, onBlur, value }) => (\n                                <StyledTextInput\n                                    placeholder=\"Phone Number\"\n                                    onChangeText={onChangeField('phoneNumber')}\n                                    defaultValue={formValues.phoneNumber || ''}\n                                />\n                            )}\n                            defaultValue={formValues.phoneNumber || ''}\n                            name=\"phoneNumber\"\n                            rules={{ required: true }}\n                        />\n                        <FormError\n                            isError={errors.phoneNumber}\n                            message={'This is required'}\n                            style={styles.formError}\n                        />\n\n                        <Controller\n                            control={control}\n                            render={({ onChange, onBlur, value }) => (\n                                <StyledTextInput\n                                    placeholder=\"Email\"\n                                    onChangeText={onChangeField('email')}\n                                    defaultValue={formValues.email || ''}\n                                    autoCapitalize=\"none\"\n                                    autoComplete=\"email\"\n                                />\n                            )}\n                            name=\"email\"\n                            rules={{\n                                required: true,\n                                validate: {\n                                    required: (value) =>\n                                        value.trim().length > 0,\n                                    valid: (value) =>\n                                        /^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/.test(\n                                            value\n                                        ),\n                                },\n                            }}\n                            defaultValue={formValues.email || ''}\n                        />\n                        <FormError\n                            isError={errors.email}\n                            message={\n                                (errors.email?.type === 'required' &&\n                                    'This is required') ||\n                                (errors.email?.type === 'valid' &&\n                                    'Must be a valid email address')\n                            }\n                            style={styles.formError}\n                        />\n                    </View>\n                )}\n\n                <Controller\n                    control={control}\n                    render={({ onChange, onBlur, value }) => (\n                        <StyledTextInput\n                            placeholder=\"Input Code\"\n                            onChangeText={onChangeField('code')}\n                            autoCapitalize=\"none\"\n                        />\n                    )}\n                    name=\"code\"\n                    rules={{ required: true }}\n                    defaultValue=\"\"\n                />\n                <FormError\n                    isError={errors.code}\n                    message={'This is required'}\n                    style={styles.formError}\n                />\n\n                    <StyledButton\n                        title=\"Confirm User\"\n                        onPress={handleSubmit(onSubmit)}\n                    />\n            </KeyboardAwareScrollView>\n        </ScreenTemplate>\n    )\n}\n\nexport default connect(mapStateToProps)(ConfirmSignUpScreen)\n","import React, { useRef } from 'react'\nimport { connect } from 'react-redux'\nimport { StyleSheet } from 'react-native'\nimport { useForm, Controller } from 'react-hook-form'\nimport PropTypes, { InferProps } from 'prop-types'\nimport { StackNavigationProp } from '@react-navigation/stack'\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view'\n\nimport { styles } from '../styles/styles'\n\nimport {\n    widthPercentageToDP as wp,\n    heightPercentageToDP as hp,\n} from 'react-native-responsive-screen'\nimport { ScreenTemplate } from '../screens/ScreenTemplate'\nimport { AppDispatch, RootState } from '../ts/types'\nimport { signUp } from '../auth/services'\nimport FormError from '../components/FormError'\nimport { StyledButton } from '../components/StyledButton'\nimport { StyledTextInput } from '../components/StyledTextInput'\nimport { isMobile } from '../utils'\n\nconst mapStateToProps = (state: RootState) => {\n    return { signUpEmail: state.user.email }\n}\n\nconst propTypes = {\n    confirmUserThunk: PropTypes.func.isRequired,\n    navigation: PropTypes.shape({\n        navigate: PropTypes.func.isRequired,\n    }).isRequired,\n    signUpEmail: PropTypes.string.isRequired,\n    signUpThunk: PropTypes.func.isRequired,\n}\n\ntype Props = InferProps<typeof propTypes>\n\nconst SignUpScreen: React.FC<Props> = ({\n    navigation,\n    signUpEmail,\n    signUpThunk,\n}) => {\n    const { control, getValues, handleSubmit, errors, setValue } = useForm()\n    const onChangeField = (name: string) => (text: string) =>\n        setValue(name, text.trim())\n    const navigateToConfirm = (justSignedUp = false) => {\n        const form = getValues()\n        navigation.navigate('confirm-sign-up', { form, justSignedUp })\n    }\n    const onSubmit = (data, e) =>\n        signUp\n            .service(data.email, data.password)\n            .then(() => navigateToConfirm(true))\n    return (\n        <ScreenTemplate>\n            <KeyboardAwareScrollView\n                resetScrollToCoords={{ x: 0, y: 0 }}\n                contentContainerStyle={{\n                    flexGrow: 1,\n                    flexDirection: 'column',\n                    height: isMobile ? hp('100%') : 400,\n                    width: isMobile ? wp('100%') : 400,\n                    justifyContent: 'center',\n                }}\n                scrollEnabled={true}\n            >\n                <Controller\n                    control={control}\n                    render={({ onChange, onBlur, value }) => (\n                        <StyledTextInput\n                            placeholder=\"First Name\"\n                            onChangeText={onChangeField('firstName')}\n                            defaultValue=\"\"\n                            autoCapitalize=\"none\"\n                        />\n                    )}\n                    name=\"firstName\"\n                    rules={{ required: true }}\n                    defaultValue=\"\"\n                />\n                <FormError\n                    isError={errors.firstName}\n                    message={'This is required'}\n                />\n\n                <Controller\n                    control={control}\n                    render={({ onChange, onBlur, value }) => (\n                        <StyledTextInput\n                            placeholder=\"Last Name\"\n                            onChangeText={onChangeField('lastName')}\n                            defaultValue=\"\"\n                            autoCapitalize=\"words\"\n                        />\n                    )}\n                    name=\"lastName\"\n                    rules={{ required: true }}\n                    defaultValue=\"\"\n                />\n                <FormError\n                    isError={errors.lastName}\n                    message={'This is required'}\n                    style={styles.formError}\n                />\n\n                <Controller\n                    control={control}\n                    render={({ onChange, onBlur, value }) => (\n                        <StyledTextInput\n                            placeholder=\"Phone Number\"\n                            onChangeText={onChangeField('phoneNumber')}\n                            defaultValue=\"\"\n                        />\n                    )}\n                    name=\"phoneNumber\"\n                    rules={{ required: true }}\n                    autoCapitalize=\"none\"\n                    defaultValue=\"\"\n                />\n                <FormError\n                    isError={errors.phoneNumber}\n                    message={'This is required'}\n                    style={styles.formError}\n                />\n\n                <Controller\n                    control={control}\n                    render={({ onChange, onBlur, value }) => (\n                        <StyledTextInput\n                            placeholder=\"Email\"\n                            onChangeText={onChangeField('email')}\n                            style={styles.input}\n                            autoCapitalize=\"none\"\n                            autoComplete=\"email\"\n                        />\n                    )}\n                    name=\"email\"\n                    rules={{\n                        required: true,\n                        validate: {\n                            required: (value) => value.trim().length > 0,\n                            valid: (value) =>\n                                /^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/.test(value),\n                        },\n                    }}\n                    defaultValue=\"\"\n                />\n                <FormError\n                    isError={errors.email}\n                    message={\n                        (errors.email?.type === 'required' &&\n                            'This is required') ||\n                        (errors.email?.type === 'valid' &&\n                            'Must be a valid email address')\n                    }\n                    style={styles.formError}\n                />\n\n                <Controller\n                    control={control}\n                    render={({ onChange, onBlur, value }) => (\n                        <StyledTextInput\n                            placeholder=\"Password\"\n                            secureTextEntry={true}\n                            onChangeText={onChangeField('password')}\n                            style={styles.input}\n                            autoCapitalize=\"none\"\n                        />\n                    )}\n                    name=\"password\"\n                    rules={{\n                        required: true,\n                        validate: {\n                            required: (value) => value.trim().length > 0,\n                            minLength: (value) => value.trim().length >= 8,\n                        },\n                    }}\n                    defaultValue=\"\"\n                />\n                <FormError\n                    isError={errors.password}\n                    message={\n                        (errors.password?.type === 'required' &&\n                            'This is required') ||\n                        (errors.password?.type === 'minLength' &&\n                            'Password must be at least 8 characters')\n                    }\n                    style={styles.formError}\n                />\n\n                <Controller\n                    control={control}\n                    render={({ onChange, onBlur, value }) => (\n                        <StyledTextInput\n                            placeholder=\"Confirm Password\"\n                            secureTextEntry={true}\n                            onChangeText={onChangeField('confirmPassword')}\n                            autoCapitalize=\"none\"\n                        />\n                    )}\n                    name=\"confirmPassword\"\n                    rules={{\n                        required: true,\n                        validate: (value) => value === getValues().password,\n                    }}\n                    defaultValue=\"\"\n                />\n                <FormError\n                    isError={errors.confirmPassword}\n                    message={'Passwords must match'}\n                    style={styles.formError}\n                />\n\n                <StyledButton title=\"Sign Up\" onPress={handleSubmit(onSubmit)} />\n                <StyledButton\n                    title=\"Already have a code? Confirm here.\"\n                    onPress={() => navigateToConfirm()}\n                />\n            </KeyboardAwareScrollView>\n        </ScreenTemplate>\n    )\n}\n\nexport default connect(mapStateToProps)(SignUpScreen)\n","import React, { useRef } from 'react'\nimport { connect } from 'react-redux'\nimport { KeyboardAvoidingView, Platform } from 'react-native'\nimport { useForm, Controller } from 'react-hook-form'\nimport PropTypes, { InferProps } from 'prop-types'\nimport { StackNavigationProp } from '@react-navigation/stack'\n\nimport { styles } from '../styles/styles'\n\nimport { StyledButton } from '../components/StyledButton'\nimport { StyledTextInput } from '../components/StyledTextInput'\nimport { ScreenTemplate } from '../screens/ScreenTemplate'\nimport { AppDispatch, RootState } from '../ts/types'\nimport { forgotPasswordCode } from '../auth/services'\nimport { linkTo } from '../navigation/services'\nimport FormError from '../components/FormError'\nimport { loading } from '../loading/services'\n\nconst mapStateToProps = (state: RootState) => {\n    return {}\n}\n\nconst propTypes = {\n    navigation: StackNavigationProp,\n    signInThunk: PropTypes.func.isRequired,\n}\n\ntype Props = InferProps<typeof propTypes>\n\nconst ForgotPasswordCode: React.FC<Props> = ({ navigation }) => {\n    const { control, getValues, handleSubmit, errors, setValue } = useForm()\n    const onChangeField = (name: string) => (text: string) =>\n        setValue(name, text.trim())\n    const onSubmit = (data, e) => {\n        const email = getValues().email.toLowerCase()\n        return loading(\n            forgotPasswordCode\n                .service(email)\n                .then(navigation.navigate('ForgotPasswordSet', { email }))\n        )\n    }\n\n    return (\n        <KeyboardAvoidingView\n            behavior={Platform.select({ ios: 'padding' })}\n            style={{ flex: 1 }}\n        >\n            <ScreenTemplate>\n                <Controller\n                    control={control}\n                    render={({ onChange, onBlur, value }) => (\n                        <StyledTextInput\n                            placeholder=\"Email\"\n                            onChangeText={onChangeField('email')}\n                            autoCapitalize=\"none\"\n                            autoComplete=\"email\"\n                        />\n                    )}\n                    name=\"email\"\n                    rules={{\n                        required: true,\n                        validate: {\n                            required: (value) => value.trim().length > 0,\n                            valid: (value) =>\n                                /^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/.test(value),\n                        },\n                    }}\n                    defaultValue=\"\"\n                />\n                <FormError\n                    isError={errors.email}\n                    message={\n                        (errors.email?.type === 'required' &&\n                            'This is required') ||\n                        (errors.email?.type === 'valid' &&\n                            'Must be a valid email address')\n                    }\n                    style={styles.formError}\n                />\n\n                <StyledButton\n                    title=\"Request Code\"\n                    onPress={handleSubmit(onSubmit)}\n                />\n            </ScreenTemplate>\n        </KeyboardAvoidingView>\n    )\n}\n\nexport default connect(mapStateToProps)(ForgotPasswordCode)\n","import React, { useRef } from 'react'\nimport { connect } from 'react-redux'\nimport { StyleSheet } from 'react-native'\nimport { useForm, Controller } from 'react-hook-form'\nimport PropTypes, { InferProps } from 'prop-types'\nimport { StackNavigationProp } from '@react-navigation/stack'\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view'\n\nimport { styles } from '../styles/styles'\n\nimport {\n    widthPercentageToDP as wp,\n    heightPercentageToDP as hp,\n} from 'react-native-responsive-screen'\nimport { ScreenTemplate } from '../screens/ScreenTemplate'\nimport { AppDispatch, RootState } from '../ts/types'\nimport { loading } from '../loading/services'\nimport { forgotPasswordSet, signIn } from '../auth/services'\nimport FormError from '../components/FormError'\nimport { StyledButton } from '../components/StyledButton'\nimport { StyledTextInput } from '../components/StyledTextInput'\nimport { isMobile } from '../utils'\n\nconst mapStateToProps = (state: RootState) => {\n    return { signUpEmail: state.user.email }\n}\n\nconst propTypes = {\n    confirmUserThunk: PropTypes.func.isRequired,\n    navigation: PropTypes.shape({\n        navigate: PropTypes.func.isRequired,\n    }).isRequired,\n    signUpEmail: PropTypes.string.isRequired,\n    signUpThunk: PropTypes.func.isRequired,\n}\n\ntype Props = InferProps<typeof propTypes>\n\nconst ForgotPasswordSet: React.FC<Props> = ({ navigation, route}) => {\n    const { control, getValues, handleSubmit, errors, setValue } = useForm()\n    const email = route.params.email\n    const onChangeField = (name: string) => (text: string) =>\n        setValue(name, text.trim())\n    const onSubmit = (data, e) =>\n        loading(\n            forgotPasswordSet\n            .service(email, data.code, data.password)\n            .then(signIn.service(email, data.password))\n            .then(() => navigation.navigate('sign-in'))\n               )\n    return (\n        <ScreenTemplate>\n            <KeyboardAwareScrollView\n                resetScrollToCoords={{ x: 0, y: 0 }}\n                contentContainerStyle={{\n                    flexGrow: 1,\n                    flexDirection: 'column',\n                    height: isMobile ? hp('100%') : 400,\n                    width: isMobile ? wp('100%') : 400,\n                    justifyContent: 'center',\n                }}\n                scrollEnabled={true}\n            >\n                <Controller\n                    control={control}\n                    render={({ onChange, onBlur, value }) => (\n                        <StyledTextInput\n                            placeholder=\"Code\"\n                            onChangeText={onChangeField('code')}\n                            style={styles.input}\n                            autoCapitalize=\"none\"\n                        />\n                    )}\n                    name=\"code\"\n                    rules={{\n                        required: true,\n                    }}\n                    defaultValue=\"\"\n                />\n                <FormError\n                    isError={errors.password}\n                    message=\"This is required\"\n                    style={styles.formError}\n                />\n\n                <Controller\n                    control={control}\n                    render={({ onChange, onBlur, value }) => (\n                        <StyledTextInput\n                            placeholder=\"Password\"\n                            secureTextEntry={true}\n                            onChangeText={onChangeField('password')}\n                            style={styles.input}\n                            autoCapitalize=\"none\"\n                        />\n                    )}\n                    name=\"password\"\n                    rules={{\n                        required: true,\n                        validate: {\n                            required: (value) => value.trim().length > 0,\n                            minLength: (value) => value.trim().length >= 8,\n                        },\n                    }}\n                    defaultValue=\"\"\n                />\n                <FormError\n                    isError={errors.password}\n                    message={\n                        (errors.password?.type === 'required' &&\n                            'This is required') ||\n                        (errors.password?.type === 'minLength' &&\n                            'Password must be at least 8 characters')\n                    }\n                    style={styles.formError}\n                />\n\n                <Controller\n                    control={control}\n                    render={({ onChange, onBlur, value }) => (\n                        <StyledTextInput\n                            placeholder=\"Confirm Password\"\n                            secureTextEntry={true}\n                            onChangeText={onChangeField('confirmPassword')}\n                            autoCapitalize=\"none\"\n                        />\n                    )}\n                    name=\"confirmPassword\"\n                    rules={{\n                        required: true,\n                        validate: (value) => value === getValues().password,\n                    }}\n                    defaultValue=\"\"\n                />\n                <FormError\n                    isError={errors.confirmPassword}\n                    message={'Passwords must match'}\n                    style={styles.formError}\n                />\n\n                <StyledButton\n                    title=\"Set Password\"\n                    onPress={handleSubmit(onSubmit)}\n                />\n            </KeyboardAwareScrollView>\n        </ScreenTemplate>\n    )\n}\n\nexport default connect(mapStateToProps)(ForgotPasswordSet)\n","import React from 'react'\nimport { createStackNavigator } from '@react-navigation/stack'\n\nimport SignInScreen from '../screens/SignInScreen'\nimport ConfirmSignUpScreen from '../screens/ConfirmSignUpScreen'\nimport SignUpScreen from '../screens/SignUpScreen'\nimport ForgotPasswordCode from '../screens/ForgotPasswordCode'\nimport ForgotPasswordSet from '../screens/ForgotPasswordSet'\n\nconst Stack = createStackNavigator()\n\nconst AuthNavigator = () => (\n        <Stack.Navigator initialRouteName=\"sign-in\">\n            <Stack.Screen name=\"confirm-sign-up\" component={ConfirmSignUpScreen} options={{ title: 'Confirm Sign Up' }} />\n            <Stack.Screen name=\"ForgotPasswordCode\" component={ForgotPasswordCode} options={{ title: 'Forgot Password' }} />\n            <Stack.Screen name=\"ForgotPasswordSet\" component={ForgotPasswordSet} options={{ title: 'Set New Password' }} />\n            <Stack.Screen name=\"sign-in\" component={SignInScreen} options={{ title: 'Sign In' }} />\n            <Stack.Screen name=\"sign-up\" component={SignUpScreen} options={{ title: 'Sign Up' }} />\n        </Stack.Navigator>\n)\n\nexport default AuthNavigator\n","const tintColorLight = '#2f95dc';\nconst tintColorDark = '#fff';\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n  },\n};\n","import * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import * as React from 'react'\nimport { Pressable, StyleSheet } from 'react-native'\nimport { useNavigation } from '@react-navigation/native'\nimport { connect } from 'react-redux'\nimport PropTypes, { InferProps } from 'prop-types'\n\nimport { Text, TextProps, View } from '../components/Themed'\nimport { RootState } from '../ts/types'\nimport moment from 'moment'\n\nimport { alertStyles } from '../styles/styles'\n\nconst mapStateToProps = (state: RootState) => ({\n    aeds: state.aeds,\n})\n\nconst propTypes = {}\n\ntype Props = InferProps<typeof propTypes>\n\nconst renderAed = (aed, index) => {\n    const navigate = useNavigation().navigate\n    const color = index % 2 ? 'lightgray' : 'darkgray'\n    const daysToExpirePads = moment(aed.pads.expire).diff(moment(), 'days')\n    const daysToExpireBattery = moment(aed.battery.expire).diff(\n        moment(),\n        'days'\n    )\n    const daysSinceInspection = moment().diff(aed.lastInspected, 'days')\n    const daysToExpire =\n        daysToExpirePads <= daysToExpireBattery\n            ? daysToExpirePads\n            : daysToExpireBattery\n    let status = 'unknown'\n    let statusColor = 'red'\n\n    if (daysToExpire <= 0) {\n        statusColor = 'red'\n        status = 'Service Required'\n    } else if (daysToExpire <= 60) {\n        statusColor = 'yellow'\n        status = 'Service Soon'\n    } else if (daysSinceInspection >= 30) {\n        statusColor = 'yellow'\n        status = 'Inspection Required'\n    } else {\n        statusColor = 'green'\n        status = 'Ready'\n    }\n\n    return (\n        <Pressable\n            onPress={() =>\n                navigate(\"AED's\", { screen: 'aedDetails', params: { aed } })\n            }\n            style={{ flexDirection: 'row', backgroundColor: color }}\n            key={index}\n        >\n            <Text\n                style={{ flex: 0.3333, marginLeft: 5 }}\n            >{`${aed.make} ${aed.model}`}</Text>\n            {/*`*/}\n            <Text style={{ flex: 0.3333, paddingLeft: 5 }}>\n                {aed.location || 'Break Room'}\n            </Text>\n            <Text\n                style={{\n                    flex: 0.3333,\n                    paddingLeft: 5,\n                    backgroundColor: statusColor,\n                }}\n            >\n                {status}\n            </Text>\n        </Pressable>\n    )\n}\n\nconst Aeds: React.FC<Props> = ({ aeds, navigate }) => {\n    const hasAeds = aeds.length > 0\n    if (hasAeds) {\n        return (\n            <View\n                style={{\n                    backgroundColor: '#e6f7ff',\n                    flexDirection: 'column',\n                    width: '100%',\n                }}\n            >\n                <View\n                    style={{\n                        backgroundColor: '#e6f7ff',\n                        flexDirection: 'row',\n                        width: '100%',\n                    }}\n                >\n                    <Text style={{ flex: 0.3333, marginLeft: 5 }}>AED</Text>\n                    <Text style={{ flex: 0.3333, marginLeft: 5 }}>\n                        Location\n                    </Text>\n                    <Text style={{ flex: 0.3333, marginLeft: 5 }}>Status</Text>\n                </View>\n                {aeds.map(renderAed)}\n            </View>\n        )\n    } else {\n        return <Text>No aed's to display</Text>\n    }\n}\n\nexport default connect(mapStateToProps)(Aeds)\n","import React, { useRef, useEffect } from 'react'\nimport { Button, StyleSheet, Text, TextInput, View } from 'react-native'\nimport { connect } from 'react-redux'\nimport PropTypes, { InferProps } from 'prop-types'\nimport * as Linking from 'expo-linking'\n\nimport { styles } from '../styles/styles'\n\nimport { AppDispatch, RootState } from '../ts/types'\n\nimport { ScreenTemplate } from './ScreenTemplate'\nimport Aeds from '../aed/component'\nimport { StyledButton } from '../components/StyledButton'\n\nconst mapStateToProps = (state: RootState) => ({ aeds: state.aeds })\n\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\n    //returning the void operator prevents react complaining about a returned value to useEffect\n    updateUser: (userData: any) => void dispatch(updateUser(userData)),\n    logOut: () => void dispatch(logOut),\n})\n\nconst propTypes = {\n    updateUser: PropTypes.func.isRequired,\n    user: PropTypes.any,\n}\n\ntype Props = InferProps<typeof propTypes>\n\nconst AedScreen: React.FC<Props> = ({ navigation, aeds }) => {\n    const hasAeds = aeds.length > 0\n    return (\n        <ScreenTemplate>\n            <Aeds />\n            <StyledButton\n                title=\"Add an AED\"\n                onPress={() => navigation.navigate('AddAedScreen')}\n            />\n            {hasAeds ? (\n                <StyledButton\n                    title=\"Remove an AED\"\n                    onPress={() => navigation.navigate('RemoveAedScreen')}\n                />\n            ) : (\n                <Text></Text>\n            )}\n            <StyledButton\n                title=\"Report AED Use\"\n                onPress={() => navigation.navigate('SelectAed', {screen: 'ReportUse'})}\n            />\n        </ScreenTemplate>\n    )\n}\n\nAedScreen.propTypes = propTypes\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AedScreen)\n","import React, { useState } from 'react'\nimport { Button, Modal, Platform, View } from 'react-native'\nimport DateTimePicker from '@react-native-community/datetimepicker'\nimport SimplerDatePicker from '@cawfree/react-native-simpler-date-picker'\nimport moment from 'moment'\nimport { styles } from '../../styles/styles'\n\nexport default function ({ date, done, setDate, setShow, show }) {\n    return (\n        <Modal\n            animationType=\"slide\"\n            transparent={true}\n            visible={show}\n            onRequestClose={() => {\n                setShow(false)\n            }}\n        >\n            <View\n                style={{\n                    position: 'absolute',\n                    height: 600,\n                    width: 600,\n                    top: -750,\n                    right: -300,\n                    zIndex: 1000,\n                    margin: 20,\n                    backgroundColor: 'white',\n                    borderRadius: 20,\n                    padding: 35,\n                    alignItems: 'center',\n                    shadowColor: '#000',\n                    shadowOffset: {\n                        width: 0,\n                        height: 2,\n                    },\n                    shadowOpacity: 0.25,\n                    shadowRadius: 4,\n                    elevation: 5,\n                }}\n            >\n                <View style={[styles.container, { backgroundColor: 'white' }]}>\n                    <View>\n                        <SimplerDatePicker\n                            minDate={moment()}\n                            maxDate={moment().add(10, 'year')}\n                            onDatePicked={setDate}\n                        />\n                    </View>\n                    <View style={styles.button}>\n                        <Button\n                            title=\"Done\"\n                            onPress={() => {\n                                if (date === null) {\n                                    alert('Please select a date')\n                                    return\n                                }\n\n                                done()\n                            }}\n                        />\n                    </View>\n                    <View style={styles.button}>\n                        <Button title=\"Cancel\" onPress={() => setShow(false)} />\n                    </View>\n                </View>\n            </View>\n        </Modal>\n    )\n}\n","import React, { useState } from 'react'\nimport { Button, Modal, Platform, View } from 'react-native'\nimport SimplerDatePicker from '@cawfree/react-native-simpler-date-picker'\nimport moment from 'moment'\nimport { styles } from '../../styles/styles'\nimport PlatformDatePicker from './component'\n\n\ninterface IDatePicker {\n    onChange: Function\n    setShow: Function\n    show: Boolean\n}\n\nexport const DatePicker = ({\n    date,\n    onChange,\n    setDate,\n    setShow,\n    show,\n}: IDatePicker) => {\n    const done = (selectedDate = date) => {\n        onChange(selectedDate)\n        setShow(false)\n    }\n    return (\n        <View>\n            {show && (\n                <PlatformDatePicker\n                    date={date}\n                    done={done}\n                    onChange={onChange}\n                    setDate={setDate}\n                    setShow={setShow}\n                    show={show}\n                />\n            )}\n        </View>\n    )\n}\n","import React, { useRef, useState } from 'react'\nimport {\n    KeyboardAvoidingView,\n    Platform,\n    Pressable,\n    StyleSheet,\n    View,\n} from 'react-native'\nimport { connect } from 'react-redux'\nimport { useForm, Controller } from 'react-hook-form'\nimport PropTypes, { InferProps } from 'prop-types'\nimport * as Linking from 'expo-linking'\nimport { StyledButton } from '../components/StyledButton'\nimport { StyledTextInput } from '../components/StyledTextInput'\nimport { DatePicker } from '../components/DatePicker'\nimport { loading } from '../loading/services'\n\nimport { reportUse } from '../aed/services'\n\nimport { styles } from '../styles/styles'\n\nimport { AppDispatch, RootState } from '../ts/types'\n\nimport { ScreenTemplate } from './ScreenTemplate'\nimport FormError from '../components/FormError'\n\nconst mapStateToProps = (state: RootState) => ({\n    user: state.user,\n})\n\nconst propTypes = {\n    user: PropTypes.any,\n}\n\ntype Props = InferProps<typeof propTypes>\n\nconst EditUserInfoScreen: React.FC<Props> = (props) => {\n    const [showDatePicker, setShowDatePicker] = useState(false)\n    const [useDate, setUseDate] = useState(null)\n    const aed = props.route.params.aed\n    const { control, getValues, handleSubmit, errors, setValue } = useForm()\n    const onChangeField = (name: string) => (text: string) =>\n        setValue(name, text.trim())\n    const onChangeUseDate = (date: string) => {\n        setValue('useDate', date)\n    }\n    const onSubmit = (data, e) =>\n        loading(\n            reportUse\n                .service(data)\n                .then(() => props.navigation.navigate('AedScreen'))\n        )\n\n    return (\n        <ScreenTemplate>\n            <KeyboardAvoidingView\n                behavior={Platform.select({ ios: 'padding' })}\n                style={[{ flex: 1 }, styles.container]}\n            >\n                <Controller\n                    control={control}\n                    render={({ onChange, onBlur, value }) => (\n                        <StyledTextInput\n                            placeholder=\"Responder's Name\"\n                            onChangeText={onChangeField('responderName')}\n                            autoCapitalize=\"words\"\n                        />\n                    )}\n                    name=\"responderName\"\n                    rules={{ required: true }}\n                    defaultValue={null}\n                />\n                <FormError\n                    isError={errors.responderName}\n                    message={'This is required'}\n                    style={styles.formError}\n                />\n\n                <Controller\n                    control={control}\n                    render={({ onChange, onBlur, value }) => (\n                        <StyledTextInput\n                            placeholder=\"Patients's Name\"\n                            onChangeText={onChangeField('patientName')}\n                            autoCapitalize=\"words\"\n                        />\n                    )}\n                    name=\"patientName\"\n                    rules={{ required: true }}\n                    defaultValue={null}\n                />\n                <FormError\n                    isError={errors.patientName}\n                    message={'This is required'}\n                    style={styles.formError}\n                />\n\n                <Controller\n                    control={control}\n                    render={({ onChange, onBlur, value }) => (\n                        <StyledTextInput\n                            placeholder=\"Location of Incident\"\n                            onChangeText={onChangeField('incidentLocation')}\n                            autoCapitalize=\"words\"\n                        />\n                    )}\n                    name=\"incidentLocation\"\n                    rules={{ required: true }}\n                    defaultValue={null}\n                />\n                <FormError\n                    isError={errors.incidentLocation}\n                    message={'This is required'}\n                    style={styles.formError}\n                />\n\n                <Controller\n                    control={control}\n                    render={({ onChange, onBlur, value }) => (\n                        <Pressable onPress={() => setShowDatePicker(true)}>\n                            <View pointerEvents=\"none\">\n                                <StyledTextInput\n                                    label='Date of Incident'\n                                    value={\n                                        useDate\n                                            ? useDate.format('MMMM Do YYYY')\n                                            : 'Use Date'\n                                    }\n                                />\n                            </View>\n                        </Pressable>\n                    )}\n                    name=\"useDate\"\n                    rules={{ required: true }}\n                    defaultValue={null}\n                />\n                <FormError\n                    isError={errors.useDate}\n                    message={'Please select a date'}\n                    style={styles.formError}\n                />\n\n                <StyledButton title=\"Report\" onPress={handleSubmit(onSubmit)} />\n            </KeyboardAvoidingView>\n            <DatePicker\n                /*momentjs date objects*/\n                date={useDate}\n                onChange={onChangeUseDate}\n                setDate={setUseDate}\n                setShow={setShowDatePicker}\n                show={showDatePicker}\n            />\n        </ScreenTemplate>\n    )\n}\n\nEditUserInfoScreen.propTypes = propTypes\n\nexport default connect(mapStateToProps)(EditUserInfoScreen)\n","import React from 'react'\nimport { FlatList, View } from 'react-native'\nimport { styles } from '../styles/styles'\nimport {isMobile} from '../utils'\n\nexport const CardList = ({data, render, keyExtractor, cardFn}) => (\n    <View style={styles.cardList}>\n        <FlatList\n            data={data}\n            renderItem={render(cardFn)}\n            keyExtractor={keyExtractor}\n            numColumns={isMobile ? 2 : 4}\n        />\n    </View>\n)\n","import React from 'react'\nimport { Image, Platform, Text, TouchableOpacity, View } from 'react-native'\nimport { styles } from '../../styles/styles'\n\nconst aedImages = JSON.parse(\n    `{\"Cardiac Science\":{\"Powerheart G3\":\"https://cdn.shopify.com/s/files/1/1170/5688/products/science_f7e5b342-8734-4393-a43c-9b5ce83bd6fe_500x.jpg?v=1583941465\",\"Powerheart G3 Pro\":\"https://cdn.shopify.com/s/files/1/1170/5688/products/proo_500x.jpg?v=1584387002\",\"Powerheart G5\":\"https://cdn.shopify.com/s/files/1/1170/5688/products/caseandunitg5_500x.jpg?v=1603301766\"},\"Zoll\":{\"AED Plus\":\"https://cdn.shopify.com/s/files/1/1170/5688/products/25_632f6063-c2d9-41a0-9b23-4578865a5fb5_500x.jpg?v=1583953822\",\"AED Pro\":\"https://cdn.shopify.com/s/files/1/1170/5688/products/zollaaedpro1_500x.jpg?v=1584388306\",\"AED 3\":\"https://cdn.shopify.com/s/files/1/1170/5688/products/zollaed3pic3_1024x1024_2x_1_500x.png?v=1609261945\"}}`\n)\n\nexport const AedCard = (cardFn) => ({ item, }) => {\n    return (\n        <TouchableOpacity onPress={() => cardFn(item)}>\n            <View style={styles.card}>\n                <Image\n                    style={styles.aedImage}\n                    source={{ uri: aedImages[item.make][item.model] }}\n                />\n                <Text>{item.model}</Text>\n            </View>\n        </TouchableOpacity>\n    )\n}\n","import React, { useRef, useEffect } from 'react'\nimport { Button, Image, StyleSheet, Text, TextInput, View } from 'react-native'\nimport { connect } from 'react-redux'\nimport { useForm, Controller } from 'react-hook-form'\nimport PropTypes, { InferProps } from 'prop-types'\nimport { AedInfo } from '../aed/types'\nimport * as Linking from 'expo-linking'\n\nimport SelectBox from '../components/SelectBox'\n\nimport { loading } from '../loading/services'\nimport { removeAed } from '../aed/services'\n\nimport { styles } from '../styles/styles'\n\nimport { AppDispatch, RootState } from '../ts/types'\n\nimport { ScreenTemplate } from './ScreenTemplate'\nimport { CardList } from '../components/CardList'\nimport { AedCard } from '../aed/components/AedCard'\n\nconst mapStateToProps = (state: RootState) => ({\n    aeds: state.aeds,\n})\n\nconst propTypes = {}\n\nconst imageStyles = StyleSheet.create({\n    container: {\n        paddingTop: 50,\n    },\n    tinyLogo: {\n        width: 50,\n        height: 50,\n    },\n    logo: {\n        width: 66,\n        height: 58,\n    },\n})\n\ntype Props = InferProps<typeof propTypes>\n\nconst SelectAed: React.FC<Props> = ({ aeds, navigation, route }) => {\n    const nextScreen = route.params.screen\n    return (\n        <ScreenTemplate>\n            <CardList\n                data={aeds}\n                render={AedCard}\n                extractor={(x) => x.model}\n                cardFn={(aed: AedInfo) => navigation.navigate(nextScreen, {aed: aed})}\n            />\n        </ScreenTemplate>\n    )\n}\n\nSelectAed.propTypes = propTypes\n\nexport default connect(mapStateToProps)(SelectAed)\n","import React, { useEffect, useState } from 'react'\nimport {\n    Image,\n    Keyboard,\n    Pressable,\n    ScrollView,\n    StyleSheet,\n    Text,\n    StyledStyledTextInput,\n    View,\n} from 'react-native'\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view'\nimport { useForm, Controller } from 'react-hook-form'\nimport { connect } from 'react-redux'\nimport { ScreenTemplate } from './ScreenTemplate'\nimport PropTypes, { InferProps } from 'prop-types'\nimport * as Linking from 'expo-linking'\nimport moment from 'moment'\nimport { styles } from '../styles/styles'\nimport {\n    widthPercentageToDP as wp,\n    heightPercentageToDP as hp,\n} from 'react-native-responsive-screen'\nimport SelectMultiple from 'react-native-select-multiple'\nimport FormError from '../components/FormError'\nimport { updateAed } from '../aed/services'\nimport { loading } from '../loading/services'\nimport { AedInfo } from '../aed/types'\nimport { StyledButton } from '../components/StyledButton'\nimport { StyledTextInput } from '../components/StyledTextInput'\nimport { isMobile } from '../utils/isMobile'\n\nimport { AppDispatch, RootState } from '../ts/types'\n\nconst mapStateToProps = (state: RootState) => ({})\n\nconst propTypes = {\n    aed: PropTypes.any,\n}\n\ntype Props = InferProps<typeof propTypes>\n\nconst aedImages = JSON.parse(\n    `{\"Cardiac Science\":{\"Powerheart G3\":\"https://cdn.shopify.com/s/files/1/1170/5688/products/science_f7e5b342-8734-4393-a43c-9b5ce83bd6fe_500x.jpg?v=1583941465\",\"Powerheart G3 Pro\":\"https://cdn.shopify.com/s/files/1/1170/5688/products/proo_500x.jpg?v=1584387002\",\"Powerheart G5\":\"https://cdn.shopify.com/s/files/1/1170/5688/products/caseandunitg5_500x.jpg?v=1603301766\"},\"Zoll\":{\"AED Plus\":\"https://cdn.shopify.com/s/files/1/1170/5688/products/25_632f6063-c2d9-41a0-9b23-4578865a5fb5_500x.jpg?v=1583953822\",\"AED Pro\":\"https://cdn.shopify.com/s/files/1/1170/5688/products/zollaaedpro1_500x.jpg?v=1584388306\",\"AED 3\":\"https://cdn.shopify.com/s/files/1/1170/5688/products/zollaed3pic3_1024x1024_2x_1_500x.png?v=1609261945\"}}`\n)\n\nconst Screen: React.FC<Props> = ({ route, navigation }) => {\n    const aed = route.params.aed || {}\n    const {\n        control,\n        getValues,\n        handleSubmit,\n        errors,\n        register,\n        setValue,\n    } = useForm()\n    const [selected, setSelected] = useState(null)\n    const questions = [\n        { label: 'Ready indicator OK?', value: 'indicator' },\n        { label: 'Supplies present?', value: 'supplies' },\n        { label: 'Correct location?', value: 'location' },\n    ]\n    const onChangeField = (name: string) => (text: string) =>\n        setValue(name, text.trim())\n    const onSelectionChange = (selections, item) => {\n        setSelected(selections)\n        setValue(\n            item.value,\n            selections.some((x) => x.value === item.value)\n        )\n    }\n    const onSubmit = (data, e) => {\n        console.log('inspection data', data)\n        loading(\n            updateAed\n                .service({ ...aed, lastInspected: Date() })\n                .then(navigation.navigate('AedScreen'))\n        )\n    }\n\n    useEffect(() => {\n        register({ name: 'indicator' })\n        register({ name: 'supplies' })\n        register({ name: 'location' })\n        setValue('indicator', false)\n        setValue('supplies', false)\n        setValue('location', false)\n    }, [])\n    return (\n        <ScreenTemplate>\n            <KeyboardAwareScrollView\n                resetScrollToCoords={{ x: 0, y: 0 }}\n                contentContainerStyle={{\n                    flexGrow: 1,\n                    flexDirection: 'column',\n                    height: isMobile ? hp('100%') : 400,\n                    width: isMobile ? wp('100%') : 400,\n                    justifyContent: 'center',\n                }}\n                scrollEnabled={true}\n            >\n                <View style={{ flexDirection: 'row' }}>\n                    <Image\n                        style={styles.aedImage}\n                        source={{ uri: aedImages[aed.make][aed.model] }}\n                    />\n                    <View\n                        style={{\n                            flex: 1,\n                            flexDirection: 'column',\n                            backgroundColor: 'white',\n                            height: isMobile ? wp('50%') : 200,\n                        }}\n                    >\n                        <View\n                            style={{ marginTop: 10, paddingLeft: 10, flex: 1 }}\n                        >\n                            <Text>{'Make: ' + aed.make}</Text>\n                        </View>\n                        <View style={{ paddingLeft: 10, flex: 1 }}>\n                            <Text>{'Model: ' + aed.model}</Text>\n                        </View>\n                        <View style={{ paddingLeft: 10, flex: 1 }}>\n                            <Text>{'Serial Number: ' + aed.serialNumber}</Text>\n                        </View>\n                        <View style={{ paddingLeft: 10, flex: 1 }}>\n                            <Text>{'Location: ' + aed.location}</Text>\n                        </View>\n                        <View style={{ paddingLeft: 10, flex: 1 }}>\n                            <Text>\n                                {'Pads Expire: ' +\n                                    moment(aed.pads.expire).format('MM-DD-YY')}\n                            </Text>\n                        </View>\n                        <View style={{ paddingLeft: 10, flex: 1 }}>\n                            <Text>\n                                {'Battery Expires: ' +\n                                    moment(aed.battery.expire).format(\n                                        'MM-DD-YY'\n                                    )}\n                            </Text>\n                        </View>\n                        <View style={{ paddingLeft: 10, flex: 1 }}>\n                            <Text>\n                                {'Last Inspected: ' +\n                                    moment(aed.lastInspected).format(\n                                        'MM-DD-YY'\n                                    )}\n                            </Text>\n                        </View>\n                    </View>\n                </View>\n                <View>\n                    <SelectMultiple\n                        items={questions}\n                        selectedItems={selected}\n                        onSelectionsChange={onSelectionChange}\n                    />\n                </View>\n                <View style={{ marginTop: 30 }}>\n                    <Controller\n                        control={control}\n                        render={({ onChange, onBlur, value }) => (\n                            <StyledTextInput\n                                placeholder=\"Comments\"\n                                multiline={true}\n                                numberOfLines={5}\n                                onChangeText={onChangeField('comments')}\n                                textAlignVertical=\"top\"\n                            />\n                        )}\n                        name=\"comments\"\n                        defaultValue={null}\n                    />\n                    <FormError\n                        isError={errors.comments}\n                        message={'reserved'}\n                        style={styles.formError}\n                    />\n                </View>\n                <StyledButton title=\"Submit\" onPress={handleSubmit(onSubmit)} />\n            </KeyboardAwareScrollView>\n        </ScreenTemplate>\n    )\n}\n\nScreen.propTypes = propTypes\n\nexport const AedInspectionScreen = connect(mapStateToProps)(Screen)\n","import React, { useEffect, useState } from 'react'\nimport {\n    Button,\n    Modal,\n    Platform,\n    Pressable,\n    StyleSheet,\n    Text,\n    TextInput,\n    View,\n} from 'react-native'\nimport { connect } from 'react-redux'\nimport { useForm, Controller } from 'react-hook-form'\nimport PropTypes, { InferProps } from 'prop-types'\nimport * as Linking from 'expo-linking'\nimport { addAed } from '../../aed/services'\nimport { DatePicker } from '../../components/DatePicker'\nimport { loading } from '../../loading/services'\nimport { styles } from '../../styles/styles'\nimport { StyledTextInput } from '../../components/StyledTextInput'\n\nimport { AppDispatch, RootState } from '../../ts/types'\n\nimport { ScreenTemplate } from '../ScreenTemplate'\nimport FormError from '../../components/FormError'\n\nconst mapStateToProps = (state: RootState) => ({\n    user: state.user,\n})\n\nconst propTypes = {}\n\ntype Props = InferProps<typeof propTypes>\n\nconst Screen: React.FC<Props> = ({ navigation, route, user }) => {\n    const aedInfo = route.params.aedInfo || {}\n    const [showDatePicker, setShowDatePicker] = useState(false)\n    const [pickerField, setPickerField] = useState('pads')\n    const [padsExpiration, setPadsExpiration] = useState(null)\n    const [batteryExpiration, setBatteryExpiration] = useState(null)\n    const expirationData = {\n        pads: { date: padsExpiration, set: setPadsExpiration },\n        battery: { date: batteryExpiration, set: setBatteryExpiration },\n    }\n    const { control, getValues, handleSubmit, errors, setValue } = useForm()\n    const onChangeField = (field: string) => (value: any) =>\n        setValue(field, value)\n    const onSubmit = (data, e) => {\n        const pads = { expire: new Date(data.pads) }\n        const battery = { expire: new Date(data.battery) }\n        loading(\n            addAed\n                .service(user)({ ...aedInfo, pads, battery })\n                .then(() => navigation.navigate('AedScreen'))\n        )\n    }\n\n    return (\n        <ScreenTemplate>\n            <View style={styles.container}>\n                <Controller\n                    control={control}\n                    render={({ onChange, onBlur, value }) => (\n                        <Pressable\n                            onPress={() => {\n                                setPickerField('pads')\n                                setShowDatePicker(true)\n                            }}\n                        >\n                            <View pointerEvents=\"none\">\n                                <StyledTextInput\n                                    label='Pads Expiration Date'\n                                    value={\n                                        padsExpiration\n                                            ? padsExpiration.format(\n                                                  'MMMM Do YYYY'\n                                              )\n                                            : 'Pads'\n                                    }\n                                />\n                            </View>\n                        </Pressable>\n                    )}\n                    name=\"pads\"\n                    rules={{ required: true }}\n                    defaultValue={null}\n                />\n                <FormError\n                    isError={errors.pads}\n                    message={'Please select a date'}\n                    style={styles.formError}\n                />\n\n                <Controller\n                    control={control}\n                    render={({ onChange, onBlur, value }) => (\n                        <Pressable\n                            onPress={() => {\n                                setPickerField('battery')\n                                setShowDatePicker(true)\n                            }}\n                        >\n                            <View pointerEvents=\"none\">\n                                <StyledTextInput\n                                    label='Battery Expiration Date'\n                                    value={\n                                        batteryExpiration\n                                            ? batteryExpiration.format(\n                                                  'MMMM Do YYYY'\n                                              )\n                                            : 'Battery'\n                                    }\n                                />\n                            </View>\n                        </Pressable>\n                    )}\n                    rules={{ required: true }}\n                    name=\"battery\"\n                    defaultValue={null}\n                />\n                <FormError\n                    isError={errors.battery}\n                    message={'Please select a date'}\n                    style={styles.formError}\n                />\n\n                <View style={styles.button}>\n                    <Button title=\"Done\" onPress={handleSubmit(onSubmit)} />\n                </View>\n            </View>\n            <DatePicker\n                /*momentjs date objects*/\n                date={expirationData[pickerField].date}\n                onChange={onChangeField(pickerField)}\n                setDate={expirationData[pickerField].set}\n                setShow={setShowDatePicker}\n                show={showDatePicker}\n            />\n        </ScreenTemplate>\n    )\n}\n\nScreen.propTypes = propTypes\n\nexport const AccessoriesScreen = connect(mapStateToProps)(Screen)\n","import React from 'react'\nimport { FlatList, Text, View } from 'react-native'\nimport { styles } from '../styles/styles'\n\nexport const CardSections = ({data, render, extractor, cardFn}) => (\n    <View style={styles.cardSections}>\n        <FlatList\n            data={data}\n            renderItem={render(cardFn)}\n            keyExtractor={extractor}\n        />\n    </View>\n)\n","import React from 'react'\nimport { FlatList, Text, View } from 'react-native'\nimport { CardList } from '../../components/CardList'\nimport { AedCard } from './AedCard'\nimport { styles } from '../../styles/styles'\n\nexport const AedsByBrand = (cardFn) => ({ item }) => (\n    <View style={styles.cardSection}>\n    <Text style={styles.title}>\n    {item.make}\n    </Text>\n    <CardList data={item.models} render={AedCard} keyExtractor={(item) => item.index} cardFn={cardFn}/>\n    </View>\n)\n","import React, { useRef, useEffect } from 'react'\nimport {\n    Button,\n    FlatList,\n    Image,\n    Text,\n    TextInput,\n    TouchableOpacity,\n    View,\n} from 'react-native'\nimport { connect } from 'react-redux'\nimport { useForm, Controller } from 'react-hook-form'\nimport PropTypes, { InferProps } from 'prop-types'\nimport * as Linking from 'expo-linking'\n\nimport { addAedThunk } from '../../aed/thunks'\nimport { styles } from '../../styles/styles'\nimport { AppDispatch, RootState } from '../../ts/types'\nimport { ScreenTemplate } from '../ScreenTemplate'\nimport { CardSections } from '../../components/CardSections'\nimport { AedsByBrand } from '../../aed/components/AedsByBrand'\n\nconst mapStateToProps = (state: RootState) => ({\n    user: state.user,\n})\n\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\n})\n\nconst propTypes = {}\n\ntype Props = InferProps<typeof propTypes>\n\nconst allAeds = [\n    {\n        make: 'Cardiac Science',\n        models: ['Powerheart G3', 'Powerheart G3 Pro', 'Powerheart G5'],\n    },\n    {\n        make: 'Zoll',\n        models: ['AED Plus', 'AED Pro', 'AED 3'],\n    },\n]\n\nconst Screen: React.FC<Props> = (props) => {\n    const handleSubmit = (aedInfo: any) => props.navigation.navigate('addDetails', { aedInfo })\n\n    return (\n        <ScreenTemplate>\n            <CardSections\n                data={allAeds.map((x) => ({\n                    make: x.make,\n                    models: x.models.map((y) => ({ make: x.make, model: y })),\n                }))}\n                render={AedsByBrand}\n                extractor={(x) => x.make}\n                cardFn={handleSubmit}\n            />\n        </ScreenTemplate>\n    )\n}\n\nScreen.propTypes = propTypes\n\nexport const AddAedScreen = connect(mapStateToProps, mapDispatchToProps)(Screen)\n","import React, { useRef, useEffect } from 'react'\nimport {\n    Button,\n    KeyboardAvoidingView,\n    Platform,\n    StyleSheet,\n    Text,\n    TextInput,\n    View,\n} from 'react-native'\nimport { connect } from 'react-redux'\nimport { useForm, Controller } from 'react-hook-form'\nimport PropTypes, { InferProps } from 'prop-types'\nimport * as Linking from 'expo-linking'\nimport { StyledButton } from '../../components/StyledButton'\nimport { StyledTextInput } from '../../components/StyledTextInput'\n\n\nimport { styles } from '../../styles/styles'\n\nimport { AppDispatch, RootState } from '../../ts/types'\n\nimport { ScreenTemplate } from '../ScreenTemplate'\nimport FormError from '../../components/FormError'\n\nconst mapStateToProps = (state: RootState) => ({})\n\nconst propTypes = {}\n\ntype Props = InferProps<typeof propTypes>\n\nconst Screen: React.FC<Props> = ({ navigation, route }) => {\n    const aedInfo = route.params.aedInfo || {}\n    const { control, getValues, handleSubmit, errors, setValue } = useForm()\n    const onChangeField = (name: string) => (text: string) =>\n        setValue(name, text.trim())\n    const onSubmit = (data, e) => {\n        navigation.navigate('accessories', {\n            aedInfo: {\n                ...aedInfo,\n                serialNumber: data.serialNumber.trim(),\n                location: data.location.trim(),\n            },\n        })\n    }\n\n    return (\n        <ScreenTemplate>\n            <KeyboardAvoidingView\n                behavior={Platform.select({ ios: 'padding' })}\n                style={[{ flex: 1 }, styles.container]}\n            >\n                <Controller\n                    control={control}\n                    render={({ onChange, onBlur, value }) => (\n                        <StyledTextInput\n                            placeholder={'Serial Number'}\n                            onChangeText={onChangeField('serialNumber')}\n                        />\n                    )}\n                    rules={{ required: true }}\n                    name=\"serialNumber\"\n                    defaultValue={null}\n                    autoCapitalize=\"none\"\n                />\n                <FormError\n                    isError={errors.serialNumber}\n                    message={\"Please enter you AED's serial number\"}\n                    style={styles.formError}\n                />\n\n                <Controller\n                    control={control}\n                    render={({ onChange, onBlur, value }) => (\n                        <StyledTextInput\n                            placeholder={'Loaction'}\n                            onChangeText={onChangeField('location')}\n                        />\n                    )}\n                    rules={{ required: true }}\n                    name=\"location\"\n                    defaultValue={null}\n                    autoCapitalize=\"none\"\n                />\n                <FormError\n                    isError={errors.location}\n                    message={'This field is required'}\n                    style={styles.formError}\n                />\n\n                    <StyledButton title=\"Next\" onPress={handleSubmit(onSubmit)} />\n            </KeyboardAvoidingView>\n        </ScreenTemplate>\n    )\n}\n\nScreen.propTypes = propTypes\n\nexport const DetailsScreen = connect(mapStateToProps)(Screen)\n","import React, { useRef, useEffect } from 'react'\nimport {\n    Button,\n    Image,\n    Platform,\n    StyleSheet,\n    Text,\n    TextInput,\n    View,\n} from 'react-native'\nimport { connect } from 'react-redux'\nimport { ScreenTemplate } from './ScreenTemplate'\nimport PropTypes, { InferProps } from 'prop-types'\nimport * as Linking from 'expo-linking'\nimport moment from 'moment'\nimport { styles } from '../styles/styles'\nimport {\n    widthPercentageToDP as wp,\n    heightPercentageToDP as hp,\n} from 'react-native-responsive-screen'\nimport { isMobile } from '../utils'\n\nimport { AppDispatch, RootState } from '../ts/types'\n\nconst mapStateToProps = (state: RootState) => ({ aeds: state.aeds })\n\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\n    //returning the void operator prevents react complaining about a returned value to useEffect\n    updateUser: (userData: any) => void dispatch(updateUser(userData)),\n    logOut: () => void dispatch(logOut),\n})\n\nconst propTypes = {\n    updateUser: PropTypes.func.isRequired,\n    user: PropTypes.any,\n}\n\ntype Props = InferProps<typeof propTypes>\n\nconst aedImages = JSON.parse(\n    `{\"Cardiac Science\":{\"Powerheart G3\":\"https://cdn.shopify.com/s/files/1/1170/5688/products/science_f7e5b342-8734-4393-a43c-9b5ce83bd6fe_500x.jpg?v=1583941465\",\"Powerheart G3 Pro\":\"https://cdn.shopify.com/s/files/1/1170/5688/products/proo_500x.jpg?v=1584387002\",\"Powerheart G5\":\"https://cdn.shopify.com/s/files/1/1170/5688/products/caseandunitg5_500x.jpg?v=1603301766\"},\"Zoll\":{\"AED Plus\":\"https://cdn.shopify.com/s/files/1/1170/5688/products/25_632f6063-c2d9-41a0-9b23-4578865a5fb5_500x.jpg?v=1583953822\",\"AED Pro\":\"https://cdn.shopify.com/s/files/1/1170/5688/products/zollaaedpro1_500x.jpg?v=1584388306\",\"AED 3\":\"https://cdn.shopify.com/s/files/1/1170/5688/products/zollaed3pic3_1024x1024_2x_1_500x.png?v=1609261945\"}}`\n)\n\nconst Screen: React.FC<Props> = ({ route, navigation }) => {\n    const aed = route.params.aed\n    return (\n        <ScreenTemplate>\n            <View\n                style={{\n                    flex: 1,\n                    flexDirection: 'column',\n                    width: isMobile ? wp('100%') : 400,\n                    justifyContent: 'center',\n                }}\n            >\n                <View style={{ flexDirection: 'row' }}>\n                    <Image\n                        style={styles.aedImage}\n                        source={{ uri: aedImages[aed.make][aed.model] }}\n                    />\n                    <View\n                        style={{\n                            flex: 1,\n                            flexDirection: 'column',\n                            backgroundColor: 'white',\n                            height: isMobile ? wp('50%') : 200,\n                        }}\n                    >\n                        <View\n                            style={{ marginTop: 10, paddingLeft: 10, flex: 1 }}\n                        >\n                            <Text>{'Make: ' + aed.make}</Text>\n                        </View>\n                        <View style={{ paddingLeft: 10, flex: 1 }}>\n                            <Text>{'Model: ' + aed.model}</Text>\n                        </View>\n                        <View style={{ paddingLeft: 10, flex: 1 }}>\n                            <Text>{'Serial Number: ' + aed.serialNumber}</Text>\n                        </View>\n                        <View style={{ paddingLeft: 10, flex: 1 }}>\n                            <Text>{'Location: ' + aed.location}</Text>\n                        </View>\n                        <View style={{ paddingLeft: 10, flex: 1 }}>\n                            <Text>\n                                {'Pads Expire: ' +\n                                    moment(aed.pads.expire).format('MM-DD-YY')}\n                            </Text>\n                        </View>\n                        <View style={{ paddingLeft: 10, flex: 1 }}>\n                            <Text>\n                                {'Battery Expires: ' +\n                                    moment(aed.battery.expire).format(\n                                        'MM-DD-YY'\n                                    )}\n                            </Text>\n                        </View>\n                        <View style={{ paddingLeft: 10, flex: 1 }}>\n                            <Text>\n                                {'Last Inspected: ' +\n                                    moment(aed.lastInspected).format(\n                                        'MM-DD-YY'\n                                    )}\n                            </Text>\n                        </View>\n                    </View>\n                </View>\n                <View style={styles.button}>\n                    <Button\n                        title=\"Inspect Now\"\n                        onPress={() =>\n                            navigation.navigate('aedInspection', {\n                                aed,\n                            })\n                        }\n                    />\n                </View>\n            </View>\n        </ScreenTemplate>\n    )\n}\n\nScreen.propTypes = propTypes\n\nexport const AedDetailsScreen = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Screen)\n","import React, { useRef, useEffect } from 'react'\nimport { Button, Image, StyleSheet, Text, TextInput, View } from 'react-native'\nimport { connect } from 'react-redux'\nimport { useForm, Controller } from 'react-hook-form'\nimport PropTypes, { InferProps } from 'prop-types'\nimport {AedInfo} from '../aed/types'\nimport * as Linking from 'expo-linking'\n\nimport SelectBox from '../components/SelectBox'\n\nimport { loading } from '../loading/services'\nimport { removeAed } from '../aed/services'\n\nimport { styles } from '../styles/styles'\n\nimport { AppDispatch, RootState } from '../ts/types'\n\nimport { ScreenTemplate } from './ScreenTemplate'\nimport { CardList } from '../components/CardList'\nimport { AedCard } from '../aed/components/AedCard'\n\nconst mapStateToProps = (state: RootState) => ({\n    aeds: state.aeds,\n})\n\nconst propTypes = {}\n\nconst imageStyles = StyleSheet.create({\n    container: {\n        paddingTop: 50,\n    },\n    tinyLogo: {\n        width: 50,\n        height: 50,\n    },\n    logo: {\n        width: 66,\n        height: 58,\n    },\n})\n\ntype Props = InferProps<typeof propTypes>\n\nconst RemoveAedsScreen: React.FC<Props> = ({ aeds, navigation}) => {\n    return (\n        <ScreenTemplate>\n            <CardList\n                data={aeds}\n                render={AedCard}\n                extractor={(x) => x.model}\n                cardFn={(aed: AedInfo) => loading(removeAed.service(aed.id).then(() => navigation.navigate('AedScreen')))}\n            />\n        </ScreenTemplate>\n    )\n}\n\nRemoveAedsScreen.propTypes = propTypes\n\nexport default connect(mapStateToProps)(RemoveAedsScreen)\n","\nimport React from 'react'\nimport { createStackNavigator } from '@react-navigation/stack'\nimport { CommonActions, useNavigation } from '@react-navigation/native'\nimport AedScreen from '../screens/AedScreen'\nimport ReportUse from '../screens/ReportUse'\nimport SelectAed from '../screens/SelectAed'\nimport { AedInspectionScreen } from '../screens/AedInspectionScreen'\nimport {\n    AccessoriesScreen,\n    AddAedScreen,\n    DetailsScreen,\n} from '../screens/AddAed'\nimport { AedDetailsScreen } from '../screens/AedDetailsScreen'\nimport RemoveAedScreen from '../screens/RemoveAedScreen'\n\nconst AedStack = createStackNavigator<StackParamList>()\n\nexport const  AedNavigator = () => {\n    const navigation = useNavigation()\n    navigation.addListener('tabPress', (e) => {\n        navigation.dispatch(\n            CommonActions.reset({\n                index: 0,\n                routes: [\n                    { name: 'AedScreen' },\n                ],\n            })\n        )\n    })\n    return (\n        <AedStack.Navigator\n            screenOptions={{\n                headerShown: false,\n            }}\n            initialRouteName=\"AedScreen\"\n        >\n            <AedStack.Screen\n                name=\"AedScreen\"\n                component={AedScreen}\n                options={{ headerTitle: \"AED's\" }}\n            />\n            <AedStack.Screen\n                name=\"RemoveAedScreen\"\n                component={RemoveAedScreen}\n                options={{ headerTitle: 'Remove an AED' }}\n            />\n            <AedStack.Screen\n                name=\"AddAedScreen\"\n                component={AddAedScreen}\n                options={{ headerTitle: 'Add an AED' }}\n            />\n            <AedStack.Screen\n                name=\"accessories\"\n                component={AccessoriesScreen}\n                options={{ headerTitle: 'Add AED/Accessories' }}\n            />\n            <AedStack.Screen\n                name=\"addDetails\"\n                component={DetailsScreen}\n                options={{ headerTitle: 'Add AED/Serial Number' }}\n            />\n            <AedStack.Screen\n                name=\"aedDetails\"\n                component={AedDetailsScreen}\n                options={{ headerTitle: 'AED Details' }}\n            />\n            <AedStack.Screen\n                name=\"aedInspection\"\n                component={AedInspectionScreen}\n                options={{ headerTitle: 'AED Inspection' }}\n            />\n            <AedStack.Screen\n                name=\"ReportUse\"\n                component={ReportUse}\n                options={{ headerTitle: 'Report AED Use' }}\n            />\n            <AedStack.Screen\n                name=\"SelectAed\"\n                component={SelectAed}\n                options={{ headerTitle: 'Select AED' }}\n            />\n        </AedStack.Navigator>\n    )\n}\n","import * as React from 'react'\nimport { StyleSheet } from 'react-native'\nimport { connect } from 'react-redux'\nimport PropTypes, { InferProps } from 'prop-types'\n\nimport { Text, TextProps, View } from '../components/Themed'\nimport { RootState } from '../ts/types'\n\nimport { alertStyles } from '../styles/styles'\n\nconst mapStateToProps = (state: RootState) => ({\n    user: state.user,\n})\n\nconst propTypes = {}\n\ntype Props = InferProps<typeof propTypes>\n\nconst UserInfo: React.FC<Props> = ({ user }) => {\n    return (\n        <View\n            style={{\n                backgroundColor: '#e6f7ff',\n                flexDirection: 'column',\n                margin: 5,\n                width: '100%',\n            }}\n        >\n            <View style={{ flexDirection: 'row' }}>\n                <View style={{ flex: 0.3, backgroundColor: 'lightgray', paddingLeft: 5 }}>\n                    <Text>{user.firstName + ' ' + user.lastName}</Text>\n                </View>\n                <View style={{ flex: 0.3, backgroundColor: 'lightgray' }}>\n                    <Text>{user.phoneNumber}</Text>\n                </View>\n                <View style={{ flex: 0.4, backgroundColor: 'lightgray' }}>\n                    <Text>{user.email}</Text>\n                </View>\n            </View>\n        </View>\n    )\n}\n\nexport default connect(mapStateToProps)(UserInfo)\n","import React, { useRef, useEffect } from 'react'\nimport { Button, StyleSheet, Text, TextInput, View } from 'react-native'\nimport { connect } from 'react-redux'\nimport PropTypes, { InferProps } from 'prop-types'\nimport * as Linking from 'expo-linking'\n\nimport { styles } from '../styles/styles'\n\nimport { AppDispatch, RootState } from '../ts/types'\n\nimport { ScreenTemplate } from './ScreenTemplate'\nimport Aeds from '../aed/component'\nimport UserInfo from '../user/component'\nimport { logout } from '../auth/services'\n\nconst mapStateToProps = (state: RootState) => ({})\n\nconst propTypes = {}\n\ntype Props = InferProps<typeof propTypes>\n\nconst HomeScreen: React.FC<Props> = (props) => {\n    return (\n        <ScreenTemplate>\n            <View style={styles.container}>\n                <UserInfo />\n                <Aeds />\n                <View style={styles.button}>\n                    <Button title=\"Log Out\" onPress={logout} />\n                </View>\n            </View>\n        </ScreenTemplate>\n    )\n}\n\nHomeScreen.propTypes = propTypes\n\nexport default connect(mapStateToProps)(HomeScreen)\n","import React from 'react'\nimport { createStackNavigator } from '@react-navigation/stack'\nimport { CommonActions, useNavigation } from '@react-navigation/native'\nimport HomeScreen from '../screens/HomeScreen'\n\nconst HomeStack = createStackNavigator<StackParamList>()\n\nexport const HomeNavigator = () => {\n    const navigation = useNavigation()\n    navigation.addListener('tabPress', (e) => {\n        navigation.dispatch(\n            CommonActions.reset({\n                index: 0,\n                routes: [\n                    { name: 'HomeScreen' },\n                ],\n            })\n        )\n    })\n    return (\n        <HomeStack.Navigator\n            screenOptions={{\n                headerShown: false,\n            }}\n        >\n            <HomeStack.Screen\n                name=\"HomeScreen\"\n                component={HomeScreen}\n                options={{ headerTitle: 'Home' }}\n            />\n        </HomeStack.Navigator>\n    )\n}\n","import React, { useRef } from 'react'\nimport { connect } from 'react-redux'\nimport { StyleSheet } from 'react-native'\nimport { useForm, Controller } from 'react-hook-form'\nimport PropTypes, { InferProps } from 'prop-types'\nimport { StackNavigationProp } from '@react-navigation/stack'\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view'\n\nimport { styles } from '../styles/styles'\n\nimport {\n    widthPercentageToDP as wp,\n    heightPercentageToDP as hp,\n} from 'react-native-responsive-screen'\nimport { ScreenTemplate } from '../screens/ScreenTemplate'\nimport { AppDispatch, RootState } from '../ts/types'\nimport { loading } from '../loading/services'\nimport { changePassword } from '../auth/services'\nimport FormError from '../components/FormError'\nimport { StyledButton } from '../components/StyledButton'\nimport { StyledTextInput } from '../components/StyledTextInput'\nimport { isMobile } from '../utils'\n\nconst propTypes = {\n    confirmUserThunk: PropTypes.func.isRequired,\n    navigation: PropTypes.shape({\n        navigate: PropTypes.func.isRequired,\n    }).isRequired,\n    signUpEmail: PropTypes.string.isRequired,\n    signUpThunk: PropTypes.func.isRequired,\n}\n\ntype Props = InferProps<typeof propTypes>\n\nconst ChangePassword: React.FC<Props> = ({ navigation, route}) => {\n    const { control, getValues, handleSubmit, errors, setValue } = useForm()\n    const onChangeField = (name: string) => (text: string) =>\n        setValue(name, text.trim())\n    const onSubmit = (data, e) =>\n        loading(\n            changePassword\n            .service(data.oldPassword, data.newPassword)\n            .then(() => navigation.navigate('UserInfoScreen'))\n               )\n    return (\n        <ScreenTemplate>\n            <KeyboardAwareScrollView\n                resetScrollToCoords={{ x: 0, y: 0 }}\n                contentContainerStyle={{\n                    flexGrow: 1,\n                    flexDirection: 'column',\n                    height: isMobile ? hp('100%') : 400,\n                    width: isMobile ? wp('100%') : 400,\n                    justifyContent: 'center',\n                }}\n                scrollEnabled={true}\n            >\n                <Controller\n                    control={control}\n                    render={({ onChange, onBlur, value }) => (\n                        <StyledTextInput\n                            placeholder=\"Old Password\"\n                            secureTextEntry={true}\n                            onChangeText={onChangeField('oldPassword')}\n                            autoCapitalize=\"none\"\n                        />\n                    )}\n                    name=\"oldPassword\"\n                    rules={{\n                        required: true,\n                    }}\n                    defaultValue=\"\"\n                />\n                <FormError\n                    isError={errors.oldPassword}\n                    message=\"This is required\"\n                    style={styles.formError}\n                />\n\n                <Controller\n                    control={control}\n                    render={({ onChange, onBlur, value }) => (\n                        <StyledTextInput\n                            placeholder=\"New Password\"\n                            secureTextEntry={true}\n                            onChangeText={onChangeField('newPassword')}\n                            autoCapitalize=\"none\"\n                        />\n                    )}\n                    name=\"newPassword\"\n                    rules={{\n                        required: true,\n                        validate: {\n                            required: (value) => value.trim().length > 0,\n                            minLength: (value) => value.trim().length >= 8,\n                        },\n                    }}\n                    defaultValue=\"\"\n                />\n                <FormError\n                    isError={errors.newPassword}\n                    message={\n                        (errors.newPassword?.type === 'required' &&\n                            'This is required') ||\n                        (errors.newPassword?.type === 'minLength' &&\n                            'Password must be at least 8 characters')\n                    }\n                    style={styles.formError}\n                />\n\n                <Controller\n                    control={control}\n                    render={({ onChange, onBlur, value }) => (\n                        <StyledTextInput\n                            placeholder=\"Confirm New Password\"\n                            secureTextEntry={true}\n                            onChangeText={onChangeField('confirmPassword')}\n                            autoCapitalize=\"none\"\n                        />\n                    )}\n                    name=\"confirmPassword\"\n                    rules={{\n                        required: true,\n                        validate: (value) => value === getValues().newPassword,\n                    }}\n                    defaultValue=\"\"\n                />\n                <FormError\n                    isError={errors.confirmPassword}\n                    message={'Passwords must match'}\n                    style={styles.formError}\n                />\n\n                <StyledButton\n                    title=\"Set Password\"\n                    onPress={handleSubmit(onSubmit)}\n                />\n            </KeyboardAwareScrollView>\n        </ScreenTemplate>\n    )\n}\n\nexport default connect()(ChangePassword)\n\n","import React, { useRef, useEffect } from 'react'\nimport { KeyboardAvoidingView, Platform, StyleSheet } from 'react-native'\nimport { connect } from 'react-redux'\nimport { useForm, Controller } from 'react-hook-form'\nimport PropTypes, { InferProps } from 'prop-types'\nimport * as Linking from 'expo-linking'\nimport { StyledButton } from '../components/StyledButton'\nimport { StyledTextInput } from '../components/StyledTextInput'\n\nimport { updateUser } from '../user/services'\n\nimport { styles } from '../styles/styles'\n\nimport { AppDispatch, RootState } from '../ts/types'\n\nimport { ScreenTemplate } from './ScreenTemplate'\nimport UserInfo from '../user/component'\n\nconst mapStateToProps = (state: RootState) => ({\n    user: state.user,\n})\n\nconst propTypes = {\n    user: PropTypes.any,\n}\n\ntype Props = InferProps<typeof propTypes>\n\nconst EditUserInfoScreen: React.FC<Props> = (props) => {\n    const { control, getValues, handleSubmit, errors, setValue } = useForm()\n    const onChangeField = (name: string) => (text: string) =>\n        setValue(name, text.trim())\n    const onSubmit = (data, e) => {\n        updateUser\n            .service({ ...data, id: props.user.id })\n            .then(() => props.navigation.navigate('UserInfoScreen'))\n    }\n\n    return (\n        <ScreenTemplate>\n            <KeyboardAvoidingView\n                behavior={Platform.select({ ios: 'padding' })}\n                style={[{ flex: 1 }, styles.container]}\n            >\n                <Controller\n                    control={control}\n                    render={({ onChange, onBlur, value }) => (\n                        <StyledTextInput\n                            defaultValue={props.user.firstName}\n                            onChangeText={onChangeField('firstName')}\n                            autoCapitalize=\"words\"\n                        />\n                    )}\n                    name=\"firstName\"\n                    defaultValue={props.user.firstName}\n                />\n                <Controller\n                    control={control}\n                    render={({ onChange, onBlur, value }) => (\n                        <StyledTextInput\n                            defaultValue={props.user.lastName}\n                            onChangeText={onChangeField('lastName')}\n                            autoCapitalize=\"words\"\n                        />\n                    )}\n                    name=\"lastName\"\n                    defaultValue={props.user.lastName}\n                />\n                <Controller\n                    control={control}\n                    render={({ onChange, onBlur, value }) => (\n                        <StyledTextInput\n                            defaultValue={props.user.email}\n                            onChangeText={onChangeField('email')}\n                            editable={false}\n                        />\n                    )}\n                    name=\"email\"\n                    defaultValue={props.user.email}\n                />\n                <Controller\n                    control={control}\n                    render={({ onChange, onBlur, value }) => (\n                        <StyledTextInput\n                            defaultValue={props.user.phoneNumber}\n                            onChangeText={onChangeField('phoneNumber')}\n                            autoCapitalize=\"none\"\n                        />\n                    )}\n                    name=\"phoneNumber\"\n                    defaultValue={props.user.phoneNumber}\n                />\n                <StyledButton title=\"Update\" onPress={handleSubmit(onSubmit)} />\n            </KeyboardAvoidingView>\n        </ScreenTemplate>\n    )\n}\n\nEditUserInfoScreen.propTypes = propTypes\n\nexport default connect(mapStateToProps)(EditUserInfoScreen)\n","import React, { useRef, useEffect } from 'react'\nimport { Button, StyleSheet, Text, TextInput, View } from 'react-native'\nimport { connect } from 'react-redux'\nimport PropTypes, { InferProps } from 'prop-types'\nimport * as Linking from 'expo-linking'\nimport { StyledButton } from '../components/StyledButton'\n\nimport { styles } from '../styles/styles'\n\nimport { AppDispatch, RootState } from '../ts/types'\n\nimport UserInfo from '../user/component'\nimport { ScreenTemplate } from './ScreenTemplate'\n\nconst mapStateToProps = (state: RootState) => ({})\n\nconst mapDispatchToProps = (dispatch: AppDispatch) => ({\n    //returning the void operator prevents react complaining about a returned value to useEffect\n    updateUser: (userData: any) => void dispatch(updateUser(userData)),\n    logOut: () => void dispatch(logOut),\n})\n\nconst propTypes = {\n    updateUser: PropTypes.func.isRequired,\n    user: PropTypes.any,\n}\n\ntype Props = InferProps<typeof propTypes>\n\nconst UserInfoScreen: React.FC<Props> = ({ navigation }) => {\n    return (\n        <ScreenTemplate>\n            <View style={styles.container}>\n                <UserInfo />\n                <StyledButton\n                    title=\"Edit User Information\"\n                    onPress={() => navigation.navigate('EditUserInfoScreen')}\n                />\n                <StyledButton\n                    title=\"Change Password\"\n                    onPress={() => navigation.navigate('ChangePassword')}\n                />\n            </View>\n        </ScreenTemplate>\n    )\n}\n\nUserInfoScreen.propTypes = propTypes\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserInfoScreen)\n","import React from 'react'\nimport { createStackNavigator } from '@react-navigation/stack'\nimport { CommonActions, useNavigation } from '@react-navigation/native'\nimport ChangePassword from '../screens/ChangePassword'\nimport EditUserInfoScreen from '../screens/EditUserInfoScreen'\nimport UserInfoScreen from '../screens/UserInfoScreen'\n\nconst UserStack = createStackNavigator<StackParamList>()\n\nexport const UserNavigator = () => {\n    const navigation = useNavigation()\n    navigation.addListener('tabPress', (e) => {\n        navigation.dispatch(\n            CommonActions.reset({\n                index: 0,\n                routes: [{ name: 'UserInfoScreen' }],\n            })\n        )\n    })\n    return (\n        <UserStack.Navigator\n            screenOptions={{\n                headerShown: false,\n            }}\n        >\n            <UserStack.Screen\n                name=\"UserInfoScreen\"\n                component={UserInfoScreen}\n                options={{ headerTitle: 'User Information' }}\n            />\n            <UserStack.Screen\n                name=\"EditUserInfoScreen\"\n                component={EditUserInfoScreen}\n                options={{ headerTitle: 'Edit User Information' }}\n            />\n            <UserStack.Screen\n                name=\"ChangePassword\"\n                component={ChangePassword}\n                options={{ headerTitle: 'Change Password' }}\n            />\n        </UserStack.Navigator>\n    )\n}\n","import { Keyboard, Platform } from 'react-native'\nimport { Ionicons } from '@expo/vector-icons'\nimport { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs'\nimport { createStackNavigator } from '@react-navigation/stack'\nimport { CommonActions, useNavigation } from '@react-navigation/native'\nimport React, { useRef, useEffect, useState } from 'react'\nimport { connect } from 'react-redux'\n\nimport Colors from '../constants/Colors'\nimport useColorScheme from '../hooks/useColorScheme'\nimport { TabParamList, StackParamList, TabTwoParamList } from '../types'\nimport { AedNavigator } from './AedNavigator'\nimport { HomeNavigator } from './HomeNavigator'\nimport { UserNavigator } from './UserNavigator'\nimport { isMobile } from '../utils'\n\nconst Tab = createMaterialTopTabNavigator<TabParamList>()\n\nconst mapStateToProps = (state: RootState) => {\n    return {\n        role: state.user.role,\n    }\n}\n\nconst useTabBarVisibility = () => {\n    const [visible, setVisible] = useState(true)\n    const keyboardEventListeners = useRef<EmitterSubscription[]>([])\n\n    useEffect(() => {\n        const listeners = keyboardEventListeners.current\n\n        if (Platform.OS === 'android') {\n            listeners?.push(\n                Keyboard.addListener('keyboardDidShow', () => setVisible(false))\n            )\n            listeners?.push(\n                Keyboard.addListener('keyboardDidHide', () => setVisible(true))\n            )\n        }\n\n        return () => listeners && listeners.forEach((event) => event.remove())\n    }, [])\n\n    return visible\n}\n\nfunction TabNavigator({ role }: { role: string }) {\n    const colorScheme = useColorScheme()\n    const isGlobalAdmin = role === 'GLOBAL_ADMIN'\n    const isOrganizationAdmin = role === 'ORGANIZATION_ADMIN' || isGlobalAdmin\n    const isFacilityAdmin =\n        role === 'FACILITY_ADMIN' || isOrganizationAdmin || isGlobalAdmin\n    const visible = useTabBarVisibility()\n\n    return (\n        <Tab.Navigator\n            initialRouteName=\"Home\"\n            tabBarOptions={{\n                activeTintColor: Colors[colorScheme].tint,\n                style: {\n                    display: visible ? 'flex' : 'none',\n                },\n            }}\n            tabBarPosition={isMobile ? 'bottom' : 'top'}\n        >\n            <Tab.Screen\n                name=\"Home\"\n                component={HomeNavigator}\n                options={{\n                    tabBarIcon: ({ color }) => (\n                        <TabBarIcon name=\"ios-code\" color={color} />\n                    ),\n                }}\n            />\n            <Tab.Screen\n                name=\"AED's\"\n                component={AedNavigator}\n                options={{\n                    tabBarIcon: ({ color }) => (\n                        <TabBarIcon name=\"ios-code\" color={color} />\n                    ),\n                }}\n            />\n            <Tab.Screen\n                name=\"User Information\"\n                component={UserNavigator}\n                options={{\n                    tabBarIcon: ({ color }) => (\n                        <TabBarIcon name=\"ios-code\" color={color} />\n                    ),\n                }}\n            />\n        </Tab.Navigator>\n    )\n}\n\n// You can explore the built-in icon families and icons on the web at:\n// https://icons.expo.fyi/\nfunction TabBarIcon(props: { name: string; color: string }) {\n    return <Ionicons size={30} style={{ marginBottom: -3 }} {...props} />\n}\n\n// Each tab has its own navigation stack, you can read more about this pattern here:\n// https://reactnavigation.org/docs/tab-based-navigation#a-stack-navigator-for-each-tab\n\nexport default connect(mapStateToProps)(TabNavigator)\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes, { InferProps } from 'prop-types'\nimport { getFocusedRouteNameFromRoute } from '@react-navigation/native'\nimport { createStackNavigator } from '@react-navigation/stack'\n\nimport AuthNavigator from './AuthNavigator'\nimport TabNavigator from './TabNavigator'\n\nimport { AppDispatch, RootState } from '../ts/types'\n\nconst mapStateToProps = (state: RootState) => {\n    const auth = state.auth.authenticated\n    return { auth }\n}\n\nconst propTypes = {\n    auth: PropTypes.bool.isRequired,\n}\n\ntype Props = InferProps<typeof propTypes>\n\nconst Stack = createStackNavigator<StackParamList>()\n\nfunction WrappedTabNavigator() {\n    return (\n        <Stack.Navigator>\n            <Stack.Screen\n                name=\"Tabs\"\n                component={TabNavigator}\n                options={({ route }) => ({\n                    headerTitle: getHeaderTitle(route),\n                })}\n            />\n        </Stack.Navigator>\n    )\n}\n\nconst Root: React.FC<Props> = ({ auth }) => {\n    if (auth) return <WrappedTabNavigator />\n    return <AuthNavigator />\n}\n\nexport default connect(mapStateToProps)(Root)\n\nfunction getHeaderTitle(route) {\n  // If the focused route is not found, we need to assume it's the initial screen\n  // This can happen during if there hasn't been any navigation inside the screen\n  // In our case, it's \"Feed\" as that's the first screen inside the navigator\n  const routeName = getFocusedRouteNameFromRoute(route) ?? 'Home';\n  return routeName\n}\n","import * as Linking from 'expo-linking'\n\nexport default {\n    prefixes: [Linking.makeUrl('/')],\n    config: {\n        screens: {\n            Root: {\n                screens: {\n                    Auth: {\n                        screens: {\n                            'sign-in': 'sign-in',\n                            'sign-up': 'sign-up',\n                            'confirm-sign-up':\n                                'confirm-sign-up/:form/:justSignedUp',\n                        },\n                    },\n                    Tabs: {\n                        screens: {\n                            Home: { screens: { HomeScreen: '/home' } },\n                            \"AED's\": {\n                                screens: {\n                                    AedScreen: 'aeds',\n                                    AedDetailScreen: 'aed-details',\n                                    aedInspection: 'aed-inspection',\n                                    RemoveAedScreen: 'remove-aed',\n                                    AddAedScreen: 'add-aed',\n                                    addDetails: 'add-aed/details',\n                                    accessories: 'add-aed/accessories',\n                                },\n                            },\n                            'User Information': { screens: {\n                                    UserInfoScreen: 'user-info',\n                                    EditUserInfoScreen: 'edit-user-info',\n                                } },\n                        },\n                    },\n                },\n            },\n        },\n    },\n}\n","import {\n    NavigationContainer,\n    DefaultTheme,\n    DarkTheme,\n} from '@react-navigation/native'\nimport { navigationRef } from './RootNavigation'\nimport { createStackNavigator } from '@react-navigation/stack'\nimport * as React from 'react'\nimport { ColorSchemeName } from 'react-native'\n\nimport NotFoundScreen from '../screens/NotFoundScreen'\nimport { RootStackParamList } from '../types'\nimport Root from './Root'\nimport LinkingConfiguration from './LinkingConfiguration'\n\n// If you are not familiar with React Navigation, we recommend going through the\n// \"Fundamentals\" guide: https://reactnavigation.org/docs/getting-started\nexport default function Navigation({\n    colorScheme,\n}: {\n    colorScheme: ColorSchemeName\n}) {\n    return (\n        <NavigationContainer\n        linking={LinkingConfiguration}\n            ref={navigationRef}\n        >\n            <RootNavigator />\n        </NavigationContainer>\n    )\n}\n\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator<RootStackParamList>()\n\nfunction RootNavigator() {\n    return (\n        <Stack.Navigator screenOptions={{ headerShown: false }}>\n            <Stack.Screen name=\"Root\" component={Root} />\n            <Stack.Screen\n                name=\"NotFound\"\n                component={NotFoundScreen}\n                options={{ title: 'Oops!' }}\n            />\n        </Stack.Navigator>\n    )\n}\n","import * as React from 'react'\nimport { ActivityIndicator } from 'react-native'\nimport { connect } from 'react-redux'\n\nimport { styles } from '../styles/styles'\n\nimport { View } from '../components/Themed'\nimport { RootState } from '../ts/types'\n\nimport TabTwoScreen from '../screens/TabTwoScreen'\n\nconst mapStateToProps = (state: RootState) => ({\n    loading: state.loading.loading,\n})\n\nconst Loading = (props) => {\n    if (props.loading) {\n        return (\n            <View style={styles.loading}>\n                <ActivityIndicator size=\"large\" color=\"black\" />\n            </View>\n        )\n    } else {\n        return []\n    }\n}\n\nexport default connect(mapStateToProps)(Loading)\n","import * as React from 'react'\nimport { StyleSheet } from 'react-native'\nimport { connect } from 'react-redux'\nimport PropTypes, { InferProps } from 'prop-types'\n\nimport { Text, TextProps, View } from '../components/Themed'\nimport { RootState } from '../ts/types'\n\nimport { alertStyles } from '../styles/styles'\n\nconst mapStateToProps = (state: RootState) => ({\n    alerts: state.alert.alerts,\n})\n\nconst propTypes = {\n    alerts: PropTypes.array.isRequired,\n}\n\ntype Props = InferProps<typeof propTypes>\n\nconst Alert: React.FC<Props> = ({ alerts }) => {\n    if (alerts.length === 0) {\n        return <Text />\n    } else {\n        return (\n            <View style={alertStyles.alertContainer}>\n                {alerts.map((alert) => {\n                    let alertType = alert.alertType || 'success'\n                    //must verify alertType exists\n                    //check exists on alertStyles?\n                    if (alert.alertType) alertType == alert.alertType\n                    return (\n                        <Text key={alert.id} style={alertStyles[alertType]}>\n                            {alert.msg}\n                        </Text>\n                    )\n                })}\n            </View>\n        )\n    }\n}\n\nexport default connect(mapStateToProps)(Alert)\n","import React from 'react'\nimport { SafeAreaProvider } from 'react-native-safe-area-context'\nimport { Provider } from 'react-redux'\n\nimport useCachedResources from './hooks/useCachedResources'\nimport useColorScheme from './hooks/useColorScheme'\nimport Navigation from './navigation'\nimport { appStore } from './redux/ConfigureStore'\n\nimport Loading from './loading/component'\nimport Alert from './alert/component'\n\nimport { registerRootComponent } from 'expo'\n\nfunction App() {\n    const isLoadingComplete = useCachedResources()\n    const colorScheme = useColorScheme()\n\n    return (\n            <Provider store={appStore}>\n                {isLoadingComplete ? (\n                    <SafeAreaProvider>\n                        <Alert />\n                        <Navigation colorScheme={colorScheme} />\n                        <Loading />\n                    </SafeAreaProvider>\n                ) : (\n                    []\n                )}\n            </Provider>\n    )\n}\n\nexport default registerRootComponent(App)\n","import { Ionicons } from '@expo/vector-icons'\nimport * as Font from 'expo-font'\nimport * as SplashScreen from 'expo-splash-screen'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\n\nimport { loadAuthToken } from '../auth/services/loadAuthToken'\n\nexport default function useCachedResources() {\n    const [isLoadingComplete, setLoadingComplete] = React.useState(false)\n\n    // Load any resources or data that we need prior to rendering the app\n    React.useEffect(() => {\n        async function loadResourcesAndDataAsync() {\n            try {\n                SplashScreen.preventAutoHideAsync()\n\n                // Load fonts\n                await Promise.all([\n                    Font.loadAsync({\n                        ...Ionicons.font,\n                        'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n                    }),\n                    loadAuthToken(),\n                ])\n            } catch (e) {\n                // We might want to provide this error information to an error reporting service\n                console.warn(e)\n            } finally {\n                setLoadingComplete(true)\n                SplashScreen.hideAsync()\n            }\n        }\n\n        loadResourcesAndDataAsync()\n    }, [])\n\n    return isLoadingComplete\n}\n","// useColorScheme from react-native does not support web currently. You can replace\n// this with react-native-appearance if you would like theme support on web.\nexport default function useColorScheme() {\n  return 'light';\n}"],"sourceRoot":""}